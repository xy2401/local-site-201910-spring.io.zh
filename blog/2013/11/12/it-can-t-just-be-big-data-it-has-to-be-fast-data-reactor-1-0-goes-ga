<!DOCTYPE html>
<html data-code-prettify="" data-mobile-support="" data-search="">
<head>
<title>It can&#39;t just be Big Data, it has to be Fast Data: Reactor 1.0 goes GA</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<link href="/css/blog-92993c3ec6808bded45b277c18d7d621.css" rel="stylesheet" type="text/css" />

<meta content="summary" name="twitter:card" />
<meta content="@springcentral" name="twitter:site" />
<meta name="twitter:title" content="It can&#39;t just be Big Data, it has to be Fast Data: Reactor 1.0 goes GA" />
<meta name="twitter:description" content="&lt;p&gt;I’m happy to announce that Reactor, a powerful foundational library for building reactive, fast data applications on the JVM has reached GA! &lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#what-is-reactor-and-why-should-i-care&quot; class=&quot;anchor&quot; name=&quot;what-is-reactor-and-why-should-i-care&quot;&gt;&lt;/a&gt;What is Reactor and why should I care?&lt;/h3&gt;
&lt;p&gt;Reactor provides the necessary abstractions to build high-throughput, low-latency–what we now call “fast data”–applications that absolutely &lt;em&gt;must&lt;/em&gt; work with thousands, tens of thousands, or even millions of concurrent requests per second.&lt;/p&gt;
&lt;p&gt;You should care about Reactor because modern applications with non-human consumers–like mobile phones and the apps that run on them–generate more data than traditional thread-per-connection servers are capable of supporting so Reactor provides you with the tools and abstractions you need to build these kinds of high-scale applications without getting bogged down in the logistics of managing state and passing around events in an asynchronous application. Modern JVM applications must be built on a solid foundation of asynchronous and reactive components that efficiently manage the execution of a very large number of tasks on a very small number of system threads. Reactor is specifically designed to help you build these kinds of applications without getting in your way or forcing you to work within an opinionated pattern. &lt;/p&gt;
" />
<meta name="twitter:creator" content="@j_brisbin" />
<meta name="twitter:image:src" content="http://gravatar.com/avatar/5500b5cf634f9a3921e4619778a1425f?s=200" />

<meta property="og:title" content="It can&#39;t just be Big Data, it has to be Fast Data: Reactor 1.0 goes GA" />
<meta property="og:image" content="http://gravatar.com/avatar/5500b5cf634f9a3921e4619778a1425f?s=200" />
<meta property="og:description" content="&lt;p&gt;I’m happy to announce that Reactor, a powerful foundational library for building reactive, fast data applications on the JVM has reached GA! &lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#what-is-reactor-and-why-should-i-care&quot; class=&quot;anchor&quot; name=&quot;what-is-reactor-and-why-should-i-care&quot;&gt;&lt;/a&gt;What is Reactor and why should I care?&lt;/h3&gt;
&lt;p&gt;Reactor provides the necessary abstractions to build high-throughput, low-latency–what we now call “fast data”–applications that absolutely &lt;em&gt;must&lt;/em&gt; work with thousands, tens of thousands, or even millions of concurrent requests per second.&lt;/p&gt;
&lt;p&gt;You should care about Reactor because modern applications with non-human consumers–like mobile phones and the apps that run on them–generate more data than traditional thread-per-connection servers are capable of supporting so Reactor provides you with the tools and abstractions you need to build these kinds of high-scale applications without getting bogged down in the logistics of managing state and passing around events in an asynchronous application. Modern JVM applications must be built on a solid foundation of asynchronous and reactive components that efficiently manage the execution of a very large number of tasks on a very small number of system threads. Reactor is specifically designed to help you build these kinds of applications without getting in your way or forcing you to work within an opinionated pattern. &lt;/p&gt;
" />
<meta content="article" property="og:type" />
<meta property="og:article:published_time" content="2013-11-12 07:00:00.0" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link active">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link active">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div></div>
<div class="container-fluid">
<div class="main-body--wrapper">
<div class="row-fluid blog--wrapper">
<article class="span8 mobile-left-pane" id="content">
<header class="desktop-only">
<div class="blog-category content--title">
<div>Engineering</div>
</div>
<div class="blog-category active content--title">
<div>Releases</div>
</div>
<div class="blog-category content--title">
<div>News and Events</div>
</div>
</header>
<div class="blog--container">
<header>
<h1 class="blog--title">It can&#39;t just be Big Data, it has to be Fast Data: Reactor 1.0 goes GA</h1>
<div class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon releases"></div>
<a class="category">Releases</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="https://gravatar.com/avatar/5500b5cf634f9a3921e4619778a1425f?s=20&amp;d=mm" />
<span class="author">Jon Brisbin</span>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2013-11-12 07:00:00.0">November 12, 2013</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="1242" href="/blog/2013/11/12/it-can-t-just-be-big-data-it-has-to-be-fast-data-reactor-1-0-goes-ga#disqus_thread">
</a></div>
</div>
</header>
<div class="blog--post"><p>I&rsquo;m happy to announce that Reactor, a powerful foundational library for building reactive, fast data applications on the JVM has reached GA! </p><h3><a href="#what-is-reactor-and-why-should-i-care" class="anchor" name="what-is-reactor-and-why-should-i-care"></a>What is Reactor and why should I care?</h3><p>Reactor provides the necessary abstractions to build high-throughput, low-latency&ndash;what we now call &ldquo;fast data&rdquo;&ndash;applications that absolutely <em>must</em> work with thousands, tens of thousands, or even millions of concurrent requests per second.</p><p>You should care about Reactor because modern applications with non-human consumers&ndash;like mobile phones and the apps that run on them&ndash;generate more data than traditional thread-per-connection servers are capable of supporting so Reactor provides you with the tools and abstractions you need to build these kinds of high-scale applications without getting bogged down in the logistics of managing state and passing around events in an asynchronous application. Modern JVM applications must be built on a solid foundation of asynchronous and reactive components that efficiently manage the execution of a very large number of tasks on a very small number of system threads. Reactor is specifically designed to help you build these kinds of applications without getting in your way or forcing you to work within an opinionated pattern. </p><h3><a href="#reactor-is-foundational" class="anchor" name="reactor-is-foundational"></a>Reactor is foundational</h3><p>Reactor itself is heavily influenced by the <a href="https://en.wikipedia.org/wiki/Reactor_pattern">well-known design pattern of the same name</a>&ndash;but it doesn&rsquo;t draw inspiration from <em>just</em> that pattern. There are elements of the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor model</a> and traditional event-based callback programming as well.</p><p>Although it is part of the foundation of the <a href="https://spring.io/platform">Spring IO platform</a>, <strong>the core Reactor libraries have no dependency on Spring</strong>. Reactor core is a self-contained library whose only external dependencies are <a href="http://www.slf4j.org/">SLF4J</a> and the fantastic <a href="https://lmax-exchange.github.io/disruptor/">LMAX Disruptor RingBuffer library</a>.</p><p>Built on Reactor&rsquo;s core are other, optional components to facilitate developing applications against common patterns. Some of Reactor&rsquo;s built-in, first-class support includes:</p>
<ul>
<li>LMAX Disruptor support via the high-speed <a href="https://reactor.github.io/docs/api/index.html?reactor/core/processor/Processor.html">Processor</a> abstraction, which provides a Reactor API over the RingBuffer.</li>
<li>Support for the high-performance <a href="https://github.com/OpenHFT/Java-Chronicle">JavaChronicle persistent message-passing library</a> through the flexible <a href="https://reactor.github.io/docs/api/index.html?reactor/queue/PersistentQueue.html">PersistentQueue</a> abstraction.</li>
<li>Supports Groovy closures and <code>@CompileStatic</code> and provides a comprehesnive environment-construction and event-wiring DSL.</li>
<li>High-performance TCP client and server support based on Netty 4.0.</li>
<li>Powerful annotation-based Spring support.</li>
<li>Buckets of stuff in the boot&hellip;</li>
</ul><h3><a href="#reactor-is-fast" class="anchor" name="reactor-is-fast"></a>Reactor is fast</h3><p>Reactor is designed from the ground up to be flexible and efficient in what it does so that it can get out of your way and help you process data through your application as fast as possible. In its fastest configuration, a standard RingBuffer-backed Reactor can publish over 10-15 million events per second on a standard developer laptop. The high-performance <code>Processor</code> abstraction can pump over 100 million events per second into your application. What your application does with the data to slow Reactor down can vary depending on the task. But with throughput as high as this in an optimum, no-op mode, an application won&rsquo;t be sitting around waiting on Reactor to do its work!</p><h3><a href="#reactor-is-functional" class="anchor" name="reactor-is-functional"></a>Reactor is functional</h3><p>Reactor core includes some fundamental abstractions inspired by (and in some cases directly based on) the new functional abstractions of JDK 8 like <code>Function&lt;T,V&gt;</code>, <code>Consumer&lt;T&gt;</code>, <code>Supplier&lt;T&gt;</code>, and <code>Predicate&lt;T&gt;</code>. Not only is Reactor itself built on the foundation of these abstractions, but your applications can also leverage them. At some point in the future JDK 8 adoption will be pervasive enough that Reactor can simply delete these abstractions from Reactor and rely on those in JDK 8. Until then, your JDK 6 and 7 applications can benefit from these functional abstractions right now.</p><h3><a href="#reactor-is-reactive" class="anchor" name="reactor-is-reactive"></a>Reactor is reactive</h3><p>Inspired by libraries like the <a href="https://rx.codeplex.com/">Reactive Extensions for .NET</a>, <a href="https://github.com/Netflix/RxJava">Netflix&rsquo;s RxJava</a>, the JDK 8 <a href="http://download.java.net/jdk8/docs/api/index.html?java/util/stream/Stream.html">Stream</a> abstraction, and many others (not to mention 20 years of event-driven Computer Science), Reactor provides a &ldquo;reactive&rdquo; programming model to make coordinating asynchronous tasks much easier. Abstractions like <code>Stream&lt;T&gt;</code> and <code>Promise&lt;T&gt;</code> make chaining non-blocking actions easy and succinct&ndash;and no callback spaghetti!</p>
<pre><code class="prettyprint java">@Inject
AsyncDataLoader loader;

Promise&lt;Buffer&gt; p = loader.get(&quot;U-U-I-D&quot;)
    .map(new Function&lt;Buffer, Data&gt;() {
      public Data apply(Buffer buff) {
        // transform data
        Data data = parser.parse(buff);
        return data;
      }
    })
    .filter(new Predicate&lt;Data&gt;() {
      public boolean test(Data data) {
        // check Data for certain conditions being true
        return null != data.getName();
      }
    })
    .consume(new Consumer&lt;Data&gt;() {
      public void accept(Data data) {
        // only Data that passes the Predicate test makes it here...
      }
    });
    
// Promises can also block like a Future
Buffer buff = p.await();
</code></pre><p>Each of these actions (<code>map</code>, <code>filter</code>, <code>consume</code>) are distinct actions performed (potentially) asynchronously. In a traditional multi-threaded environment, noisy bits of code around blocking on Futures and waiting for completions would have to be added. Using Reactor, however, you simply chain actions together in a reactive way so that an action will &ldquo;react&rdquo; to data when the previous action is finished.</p><h3><a href="#reactor-is-groovy" class="anchor" name="reactor-is-groovy"></a>Reactor is groovy</h3><p>Reactor includes first-class support for the Groovy language. It supports using Closures as callbacks, has a powerful DSL for configuring the Reactor Environment, and provides some very cool operator overloading for writing terse code. </p><h3><a href="#reactor-is-extensible" class="anchor" name="reactor-is-extensible"></a>Reactor is extensible</h3><p>Clojurewerkz has a library called <a href="https://github.com/clojurewerkz/meltdown">Meltdown</a> that is based on Reactor. Other JVM language support can be added without a lot of effort. Reactor&rsquo;s API is designed to be extensible so that non-Java languages can benefit from the tools in Reactor.</p><h3><a href="#but-what-does-the-code-look-like" class="anchor" name="but-what-does-the-code-look-like"></a>But what does the code look like?</h3><p>Reactor is Java 8 ready, so let&rsquo;s first look at some Reactor code using the awesome Lambda feature of JDK 8:</p>
<pre><code class="prettyprint java">import static reactor.event.selector.Selectors.*;

// Only create one of these per JVM
static Environment env = new Environment();

// Create a Reactor and listen to a topic using a Selector
Reactor r = Reactors.reactor(env)
  .&lt;String&gt;on($(&quot;topic&quot;), ev -&gt; System.out.prinltn(&quot;greeting: &quot; + ev.getData()));

r.notify(&quot;topic&quot;, Event.wrap(&quot;Hello World!&quot;));
</code></pre><p>One of the things Reactor hopes to accomplish is to reduce the amount of code you have to write; the above is pretty succinct. But even in Java 6 and 7 it&rsquo;s very terse:</p>
<pre><code class="prettyprint java">import static reactor.event.selector.Selectors.*;

// Only create one of these per JVM
static Environment env = new Environment();

// Create a Reactor and listen to a topic using a Selector
Reactor r = Reactors.reactor(env)
  .on($(&quot;topic&quot;), new Consumer&lt;Event&lt;String&gt;&gt;() {
    public void accept(Event&lt;String&gt; ev) {
      System.out.prinltn(&quot;greeting: &quot; + ev.getData());
    }
  });

r.notify(&quot;topic&quot;, Event.wrap(&quot;Hello World!&quot;));
</code></pre><p>In Groovy it&rsquo;s even more succinct (as you would expect) since the language support takes care of converting some objects into the right types and allows the use of Closures:</p>
<pre><code class="prettyprint java">def env = new Environment()

def r = Reactors.reactor(env).on(&quot;topic&quot;) { String greeting -&gt;
  println &quot;greeting: $greeting&quot;
}

r.notify &quot;topic&quot;, &quot;Hello World!&quot;
</code></pre><h3><a href="#dispatchers" class="anchor" name="dispatchers"></a>Dispatchers</h3><p>A <code>Dispatcher</code> is responsible for executing a task on a given <code>Thread</code>. There are various built-in implementations of <code>Dispatcher</code> that execute a task in the calling thread, on a thread from a pool, using a single-threaded event loop style dispatching, or the fastest dispatcher: the <code>RingBufferDispatcher</code> which dispatches tasks using the <a href="https://lmax-exchange.github.io/disruptor/">LMAX Disruptor RingBuffer</a>.</p><p>Whenever you create a component in Reactor, it&rsquo;s common to specify the <code>Dispatcher</code> to use when dispatching events. Instead of using a thread pool, which can become extremely expensive to CPU and GC in high-volume applications, event dispatch into the RingBuffer is extremely efficient. It&rsquo;s possible to dispatch 10&rsquo;s of millions of events per second using the <code>RingBufferDispatcher</code>.</p><h3><a href="#selectors" class="anchor" name="selectors"></a>Selectors</h3><p>A <code>Selector</code> is the dynamic mapping of actions to event keys. When you assign an action to a <code>Reactor</code>, you tell it what event keys to respond to by registering a <code>Selector</code>. There are several built-in implementations that match on things like <code>Object.equals()</code>, do String-based regular expression matching, URI template matching so you can use the familiar brace-delimited placeholder notation for matching against URIs, <code>Class.isAssignableFrom()</code> matching to select only those keys that descend from a common abstraction, <code>Predicate</code> matching to allow you to create arbitrary <code>Predicate&lt;T&gt;</code> Selectors based on scoped predicates, and there&rsquo;s even an optional <code>JsonPathSelector</code> that uses <a href="https://code.google.com/p/json-path/">JsonPath</a> to query data from the key using a JsonPath expression.</p><p>You&rsquo;ll have noticed in the samples the use of something that, as a Java developer, you might be a little confused by: the <code>$</code> shortcut method for creating a <code>Selector</code> [1]. If you&rsquo;ve used jQuery for web development, then you&rsquo;ll feel right at home because the <code>$</code> method is simply a shortcut to creating a <code>Selector</code> much like jQuery creates a CSS Query when writing things like <code>$(&quot;.css-class&quot;)</code>. If the dollar sign is too unusual for you, Reactor always tries to provide more than one way of getting something accomplished; you can use the <code>Selectors.object(T)</code> or <code>ObjectSelector.objectSelector()</code> static creation method instead (or just new up an instance of <code>ObjectSelector</code> using the constructor).</p><p>[1]: <em>Besides <code>$(T)</code>, there are other shortcut helper methods for creating Selectors. There&rsquo;s <code>R(String)</code> for creating RegexSelectors, <code>T(Class&lt;?&gt;)</code> for creating ClassSelectors, and <code>U(String)</code> for creating UriTemplateSelectors.</em></p><h3><a href="#promise-and-stream" class="anchor" name="promise-and-stream"></a>Promise and Stream</h3><p>Reactor&rsquo;s <code>Promise</code> and <code>Stream</code> provide a reactive, compositional way to coordinate multiple, asynchronous tasks without excessive callback spaghetti. A <code>Promise</code> is a stateful component that can be passed around your application and represents a value that will be populated from another thread. Like a traditional <code>Future</code>, a <code>Promise</code> can block the calling thread. But more importantly, a <code>Promise</code> makes it easy to transform values and execute whole chains of processing.</p><p>A <code>Stream</code> is similar to a <code>Promise</code> in that it provides a composition API to react to future values. But a <code>Stream</code> differs from a <code>Promise</code> in that it is designed to handle multiple values passing through.</p><p>To populate values in either a <code>Promise</code> or a <code>Stream</code>, you create a <code>Deferred</code>, which is a <code>Consumer&lt;T&gt;</code>. You can pass this <code>Deferred</code> into your service layer to communicate the eventual value back to the caller.</p>
<pre><code class="prettyprint java">// Only create one of these per JVM
static Environment env = new Environment();

public class DataLoader {

  public Promise&lt;Buffer&gt; load(String key) {  
    Deferred&lt;Buffer, Promise&lt;Buffer&gt;&gt; deferred = Promises.defer(env);

    // submit work to be done in another thread
    // like reading data from a datastore
    datastore.load(key, deferred);
    
    return deferred.compose();
  }
  
}

// Your service layer uses this API
@Inject
DataLoader loader;

loader.load(&quot;obj-key&quot;)
  .onSuccess(new Consumer&lt;Buffer&gt;() {
    public void accept(Buffer b) {
      // handle eventual data
    }
  })
  .onError(new Consumer&lt;Throwable&gt;() {
    public void accept(Throwable t) {
      // handle errors
    }
  });
</code></pre><h3><a href="#tuples" class="anchor" name="tuples"></a>Tuples</h3><p>Scala&rsquo;s Tuple class is a type-safe way to pass around a single object that encapsulates other values without creating applicaiton-specific, single-use &ldquo;holder&rdquo; beans. Reactor incorporates this functionality into its own interpretation of the <code>Tuple</code> class.</p><p>Tuples are extremely easy to use. You create one using the <code>Tuple.from(T1, T2, …)</code> methods and you can get the values from them using the <code>Tuple.getT1()</code> to <code>Tuple.getTN()</code> methods.</p>
<pre><code class="prettyprint java">reactor.on($(&quot;topic&quot;), new Consumer&lt;Event&lt;Tuple2&lt;URI, Buffer&gt;&gt;&gt;() {
  public void accept(Event&lt;Tuple2&lt;URI, Buffer&gt;&gt; ev) {
    URI uri = tup.getT1();
    Buffer buff = tup.getT2();  
    
    // deal with request from uri.getPath()
  }
});

// notify consumers of new request
reactor.notify(&quot;topic&quot;, Event.wrap(Tuple.from(requestUri, request)));
</code></pre><p>Check the <a href="https://reactor.github.io/docs/api/index.html?reactor/tuple/Tuple.html">Tuple API documentation</a> for all the possibilities.</p><h3><a href="#tcpclient-and-tcpserver" class="anchor" name="tcpclient-and-tcpserver"></a>TcpClient and TcpServer</h3><p>Reactor comes with full-featured TCP client and server abstractions. They provide an easy way to build TCP-based applications that can support large numbers of clients. The basic abstractions in the Reactor TCP support are generic and multiple implementations could be created to leverage different TCP technologies. The built-in implementation, though, leverages the great <a href="http://netty.io/">Netty library</a> for doing asynchronous IO.</p><h3><a href="#apache-licensed-with-a-friendly-community" class="anchor" name="apache-licensed-with-a-friendly-community"></a>Apache-licensed with a friendly community</h3><p>Reactor is open source and Apache-licensed. The developer and user community is just a bunch of normal folks that want to work together to create a fantastic foundation for building reactive, FastData applications on the JVM. Become a part of our community to learn more about Reactor or to contribute back through whatever improvements you&rsquo;d like to see. </p><p>To get started quickly with Reactor and see some code in various contexts, check out the quickstart:</p><p><a href="https://github.com/reactor/reactor-quickstart">https://github.com/reactor/reactor-quickstart</a></p><p>or the samples:</p><p><a href="https://github.com/reactor/reactor-samples">https://github.com/reactor/reactor-samples</a></p><p>To fork the source code, read the wiki, or file an issue, visit us on GitHub:</p><p><a href="https://github.com/reactor/reactor">https://github.com/reactor/reactor</a></p><p>There&rsquo;s a Google Group you can join to ask questions or otherwise contribute to the discussion around Reactor:</p><p><a href="https://groups.google.com/forum/#!forum/reactor-framework">https://groups.google.com/forum/#!forum/reactor-framework</a></p><p>Access the Maven artifacts to include in your project:</p>
<pre><code class="prettyprint xml">&lt;dependencies&gt;

	&lt;!-- core components --&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.projectreactor&lt;/groupId&gt;
		&lt;artifactId&gt;reactor-core&lt;/artifactId&gt;
		&lt;version&gt;1.0.0.RELEASE&lt;/version&gt;
	&lt;/dependency&gt;
	
	&lt;!-- groovy support --&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.projectreactor&lt;/groupId&gt;
		&lt;artifactId&gt;reactor-groovy&lt;/artifactId&gt;
		&lt;version&gt;1.0.0.RELEASE&lt;/version&gt;
	&lt;/dependency&gt;

	&lt;!-- tcp client/server --&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.projectreactor&lt;/groupId&gt;
		&lt;artifactId&gt;reactor-tcp&lt;/artifactId&gt;
		&lt;version&gt;1.0.0.RELEASE&lt;/version&gt;
	&lt;/dependency&gt;

	&lt;!-- spring support --&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.projectreactor&lt;/groupId&gt;
		&lt;artifactId&gt;reactor-spring&lt;/artifactId&gt;
		&lt;version&gt;1.0.0.RELEASE&lt;/version&gt;
	&lt;/dependency&gt;

&lt;/dependencies&gt;
</code></pre></div>
</div>
<section id="disqus_thread"></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 1242;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a class="dsq-brlink" href="https://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a>
<div class="mobile-only">
<p><a href="/blog">
<i class="icon-chevron-left"></i>
Back
</a></p>
</div>
</article>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<div class="icon blog-icon all-posts"></div>
<a href="/blog">All Posts</a>
<a class="pull-right" href="/blog.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon engineering"></div>
<a href="/blog/category/engineering">Engineering</a>
<a class="pull-right" href="/blog/category/engineering.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category active">
<div class="icon blog-icon releases"></div>
<a href="/blog/category/releases">Releases</a>
<a class="pull-right" href="/blog/category/releases.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon news-and-events"></div>
<a href="/blog/category/news">News and Events</a>
<a class="pull-right" href="/blog/category/news.atom"><i class="icon-rss"></i></a>
</li>
</ul>
<ul class="social-btn--container">
<a class="social-btn twitter" href="https://twitter.com/springcentral"></a>

<a class="social-btn linkedin" href="https://www.linkedin.com/groups/46964"></a>
<a class="social-btn youtube" href="/videos"></a>
</ul>
<div id="blog-sidebar-newsletter">
<p>Get updates from The Spring Team delivered to your inbox</p>
<script src="https://app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_4723"></form>
<script>
        MktoForms2.loadForm("https://app-sj05.marketo.com", "625-IUJ-009", 4723, function(form){
          form.onSuccess(function(values, followUpUrl) {
            form.getFormElem().html("<p>Thank you!</p>");
            return false;
          });
        });
      </script>
</div>
</div>
</aside>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>