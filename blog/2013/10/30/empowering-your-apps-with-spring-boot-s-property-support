<!DOCTYPE html>
<html data-code-prettify="" data-mobile-support="" data-search="">
<head>
<title>Empowering your apps with Spring Boot&#39;s property support</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<link href="/css/blog-92993c3ec6808bded45b277c18d7d621.css" rel="stylesheet" type="text/css" />

<meta content="summary" name="twitter:card" />
<meta content="@springcentral" name="twitter:site" />
<meta name="twitter:title" content="Empowering your apps with Spring Boot&#39;s property support" />
<meta name="twitter:description" content="&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt; is continuing to gather steam. Last month I wrote &lt;a href=&quot;http://spring.io/blog/2013/09/20/contributing-to-spring-boot-with-a-pull-request&quot;&gt;Contributing to Spring Boot with a pull request&lt;/a&gt;. I peeled back the layers of Spring Boot to demonstrate it’s incredible autoconfiguration features and CLI support.&lt;/p&gt;
&lt;p&gt;In this post, I want to dig into Spring Boot’s amazing support for properties. Properties are something that are small, not highly visible, yet can quickly strengthen your application in very practical ways. In this post, I’ll walk through &lt;a href=&quot;https://github.com/spring-projects/spring-boot/pull/57&quot;&gt;how I added property support&lt;/a&gt; to the Spring JMS support I coded in the previous blog post.&lt;/p&gt;
" />
<meta name="twitter:creator" content="@gregturn" />
<meta name="twitter:image:src" content="https://gravatar.com/avatar/43e9a9d63f7f4f9891c9fcd592b89cfa?s=200" />

<meta property="og:title" content="Empowering your apps with Spring Boot&#39;s property support" />
<meta property="og:image" content="https://gravatar.com/avatar/43e9a9d63f7f4f9891c9fcd592b89cfa?s=200" />
<meta property="og:description" content="&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt; is continuing to gather steam. Last month I wrote &lt;a href=&quot;http://spring.io/blog/2013/09/20/contributing-to-spring-boot-with-a-pull-request&quot;&gt;Contributing to Spring Boot with a pull request&lt;/a&gt;. I peeled back the layers of Spring Boot to demonstrate it’s incredible autoconfiguration features and CLI support.&lt;/p&gt;
&lt;p&gt;In this post, I want to dig into Spring Boot’s amazing support for properties. Properties are something that are small, not highly visible, yet can quickly strengthen your application in very practical ways. In this post, I’ll walk through &lt;a href=&quot;https://github.com/spring-projects/spring-boot/pull/57&quot;&gt;how I added property support&lt;/a&gt; to the Spring JMS support I coded in the previous blog post.&lt;/p&gt;
" />
<meta content="article" property="og:type" />
<meta property="og:article:published_time" content="2013-10-30 08:00:00.0" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link active">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link active">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div></div>
<div class="container-fluid">
<div class="main-body--wrapper">
<div class="row-fluid blog--wrapper">
<article class="span8 mobile-left-pane" id="content">
<header class="desktop-only">
<div class="blog-category active content--title">
<div>Engineering</div>
</div>
<div class="blog-category content--title">
<div>Releases</div>
</div>
<div class="blog-category content--title">
<div>News and Events</div>
</div>
</header>
<div class="blog--container">
<header>
<h1 class="blog--title">Empowering your apps with Spring Boot&#39;s property support</h1>
<div class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category">Engineering</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="https://gravatar.com/avatar/43e9a9d63f7f4f9891c9fcd592b89cfa?s=20&amp;d=mm" />
<a class="author" rel="author" href="/team/gturnquist">Greg Turnquist</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2013-10-30 08:00:00.0">October 30, 2013</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="1219" href="/blog/2013/10/30/empowering-your-apps-with-spring-boot-s-property-support#disqus_thread">
</a></div>
</div>
</header>
<div class="blog--post"><p><a href="https://github.com/spring-projects/spring-boot">Spring Boot</a> is continuing to gather steam. Last month I wrote <a href="https://spring.io/blog/2013/09/20/contributing-to-spring-boot-with-a-pull-request">Contributing to Spring Boot with a pull request</a>. I peeled back the layers of Spring Boot to demonstrate it&rsquo;s incredible autoconfiguration features and CLI support.</p><p>In this post, I want to dig into Spring Boot&rsquo;s amazing support for properties. Properties are something that are small, not highly visible, yet can quickly strengthen your application in very practical ways. In this post, I&rsquo;ll walk through <a href="https://github.com/spring-projects/spring-boot/pull/57">how I added property support</a> to the Spring JMS support I coded in the previous blog post.</p><h2><a href="#what-are-properties" class="anchor" name="what-are-properties"></a>What are properties?</h2><p>Properties are essentially ways to externalize application settings. You might bake in a particular bit of information in your application, but for multiple reasons, you want to change it later.</p>
<ul>
<li>Your default configuration is production-based (hostnames, ports, etc.), but you need to override it with different hostnames in your test bed.</li>
<li>You configure the application to use pooling but want to adjust the pool sizes.</li>
<li>You need a &ldquo;super secret&rdquo; key supplied to your application, perhaps an <a href="https://spring.io/understanding/oauth">OAuth</a> key, and you do NOT want to put a default one in your released application.</li>
</ul><p>All of these use cases are begging for different means to supply customized settings when the application is launched. Spring Boot to the rescue!</p><h2><a href="#spring-jms-and-properties" class="anchor" name="spring-jms-and-properties"></a>Spring JMS and properties</h2><p>Enough with abstract use cases. Let&rsquo;s look at a real example of how Spring Boot has property support! We&rsquo;ll dig deeper into the <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java">Spring JMS support</a>.</p>
<pre><code class="prettyprint java">@Configuration
@ConditionalOnClass({ JmsTemplate.class, ConnectionFactory.class })
@EnableConfigurationProperties(JmsTemplateProperties.class)
public class JmsTemplateAutoConfiguration {

	@Autowired
	private JmsTemplateProperties config;
	. . .
	@ConfigurationProperties(name = &quot;spring.jms&quot;)
	public static class JmsTemplateProperties {

		private boolean pubSubDomain = true;

		public boolean isPubSubDomain() {
			return this.pubSubDomain;
		}

		public void setPubSubDomain(boolean pubSubDomain) {
			this.pubSubDomain = pubSubDomain;
		}

	}
	. . .
</code></pre><p>This fragment of code from Spring Boot&rsquo;s <code>JmsTemplatAutoConfiguration</code> shows a couple of key components.<br />- @EnableConfigurationProperties leverages JmsTemplateProperties as a source of properties and makes them available to the entire class.<br />- @ConfigurationProperties(name = &ldquo;spring.jms&rdquo;) flags the JmsTemplateProperties class that it will be a holder of properties. With &ldquo;spring.jms&rdquo; acting as a prefix, every attribute of that class becomes a target property.</p><p>All I have to do is create an <strong>application.properties</strong> file and assign it values.</p>
<pre><code class="prettyprint">spring.jms.pubSubDomain=true
</code></pre><p>Further down in the same file, there are also properties for the built-in connection factory.</p>
<pre><code class="prettyprint java">	@Configuration
	@ConditionalOnClass(ActiveMQConnectionFactory.class)
	@ConditionalOnMissingBean(ConnectionFactory.class)
	@EnableConfigurationProperties(ActiveMQConnectionFactoryProperties.class)
	protected static class ActiveMQConnectionFactoryCreator {

		@Autowired
		private ActiveMQConnectionFactoryProperties config;

		@Bean
		ConnectionFactory jmsConnectionFactory() {
			if (this.config.isPooled()) {
				PooledConnectionFactory pool = new PooledConnectionFactory();
				pool.setConnectionFactory(new ActiveMQConnectionFactory(this.config
						.getBrokerURL()));
				return pool;
			}
			else {
				return new ActiveMQConnectionFactory(this.config.getBrokerURL());
			}
		}

	}

	@ConfigurationProperties(name = &quot;spring.activemq&quot;)
	public static class ActiveMQConnectionFactoryProperties {

		private String brokerURL = &quot;tcp://localhost:61616&quot;;

		private boolean inMemory = true;

		private boolean pooled = false;

		// Will override brokerURL if inMemory is set to true
		public String getBrokerURL() {
			if (this.inMemory) {
				return &quot;vm://localhost&quot;;
			}
			else {
				return this.brokerURL;
			}
		}
    . . .
</code></pre><p>By default, Spring Boot will create an ActiveMQ connection factory unless you supply <a href="http://blog.gopivotal.com/products/messaging-with-jms-and-rabbitmq">your own</a>.<br />- <code>ActiveMQConnectionFactoryCreator</code> has been flagged with <code>@EnableConfigurationProperties</code>.<br />- We can override <strong>brokerURL</strong>, <strong>inMemory</strong>, and <strong>pooled</strong>.</p><p>In <code>ActiveMQConnectionFactoryCreator</code>, if <strong>pooled</strong> is set, it creates a <strong>PooledConnectionFactory</strong>. If <strong>inMemory</strong> is set, it uses *<a href="vm://localhost*">vm://localhost*</a>. But flipping it to false will cause the connection factory to switch over to using the brokerURL.</p><p>So far, these attributes have been accessed via their respective getters. But that isn&rsquo;t the only way. Spring comes with a powerful <code>@Value</code> annotation to inject data from multiple sources including properties.</p><p>So that&rsquo;s the bulk of what I did to <a href="https://github.com/spring-projects/spring-boot/pull/57">contribute Spring JMS property support</a> to Spring Boot.</p><p>Let&rsquo;s look at more ways to use Spring Boot&rsquo;s property support.</p><h2><a href="#super-secret-github-oauth-data" class="anchor" name="super-secret-github-oauth-data"></a>Super secret GitHub oauth data</h2><p>I&rsquo;ve been working on a small application to quickly list out all the open issues agains the various <a href="https://spring.io/guides">Getting Started guides</a>. It uses <a href="https://projects.spring.io/spring-social-github/">Spring Social GitHub</a> to query for issues. To get the data I need, it&rsquo;s powerful <code>GitHubTemplate</code> needs an oauth key.</p>
<pre><code class="prettyprint groovy">@Controller
@Log
class IssueAggregator implements CommandLineRunner {

	/**
	 * This needs to be supplied by application.properties, a file NOT to be put under source control
	 */
	@Value(&#39;${token}&#39;)
	String githubToken
	
	@Bean
	GitHubTemplate githubTemplate() {
		new GitHubTemplate(githubToken)
	}
	. . .
</code></pre><p>As you can guess, <code>githubToken</code> is populated by <code>@Value(&#39;${token}&#39;)</code>. If you look closely, you&rsquo;ll notice there is no default value. That&rsquo;s because I won&rsquo;t supply one. Anyone that needs a copy of this application will have to supply their own secret oauth key, as stated in the comments.</p>
<blockquote><p><strong>Note:</strong> This is Groovy code, but the same annotations work with Java (you just need double quotes). Spring Boot is simply making is super easy to leverage Spring Framework&rsquo;s property support.</p>
</blockquote><h2><a href="#overriding-properties-with-more-properties" class="anchor" name="overriding-properties-with-more-properties"></a>Overriding properties with more properties</h2><p>That is not all. I can embed an application.properties file in my JAR that I distribute, supplying default settings.</p><p>But if I need to override anything, all I have to do is create <em>another</em> application.properties file and stage it adjacent to the JAR file. Spring Boot will first read the internal application.properties file and then automatically find the external one.</p><p>Finally, it will also read properties supplied using Java&rsquo;s <code>-Dspring.activemq.inMemory=false</code> command line directives. This provides a third way to override things.</p><p>P.S. For my Windows brethren, Spring Boot includes extra special support by mapping things like <code>SPRING_ACTIVEMQ_INMEMORY</code>, <code>spring-activemq-inmemory</code>, and <code>springActivemqInmemory</code> to the same target: <strong>spring.activemq.inMemory</strong>. This helps deal with platform-specific issues like environment variables not supporting periods.</p><h2><a href="#summary" class="anchor" name="summary"></a>Summary</h2><p>Hopefully you are groking Spring Boot&rsquo;s amazing ability to make our apps flexible and configurable through property settings. It&rsquo;s a tool that may be small in scope but just makes sense.</p><p>Happy coding!</p></div>
</div>
<section id="disqus_thread"></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 1219;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a class="dsq-brlink" href="https://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a>
<div class="mobile-only">
<p><a href="/blog">
<i class="icon-chevron-left"></i>
Back
</a></p>
</div>
</article>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<div class="icon blog-icon all-posts"></div>
<a href="/blog">All Posts</a>
<a class="pull-right" href="/blog.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category active">
<div class="icon blog-icon engineering"></div>
<a href="/blog/category/engineering">Engineering</a>
<a class="pull-right" href="/blog/category/engineering.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon releases"></div>
<a href="/blog/category/releases">Releases</a>
<a class="pull-right" href="/blog/category/releases.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon news-and-events"></div>
<a href="/blog/category/news">News and Events</a>
<a class="pull-right" href="/blog/category/news.atom"><i class="icon-rss"></i></a>
</li>
</ul>
<ul class="social-btn--container">
<a class="social-btn twitter" href="https://twitter.com/springcentral"></a>

<a class="social-btn linkedin" href="https://www.linkedin.com/groups/46964"></a>
<a class="social-btn youtube" href="/videos"></a>
</ul>
<div id="blog-sidebar-newsletter">
<p>Get updates from The Spring Team delivered to your inbox</p>
<script src="https://app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_4723"></form>
<script>
        MktoForms2.loadForm("https://app-sj05.marketo.com", "625-IUJ-009", 4723, function(form){
          form.onSuccess(function(values, followUpUrl) {
            form.getFormElem().html("<p>Thank you!</p>");
            return false;
          });
        });
      </script>
</div>
</div>
</aside>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>