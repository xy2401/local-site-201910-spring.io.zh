<!DOCTYPE html>
<html data-code-prettify="" data-mobile-support="" data-search="">
<head>
<title>What&#39;s new in Spring Data Codd RC1?</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<link href="/css/blog-92993c3ec6808bded45b277c18d7d621.css" rel="stylesheet" type="text/css" />

<meta content="summary" name="twitter:card" />
<meta content="@springcentral" name="twitter:site" />
<meta name="twitter:title" content="What&#39;s new in Spring Data Codd RC1?" />
<meta name="twitter:description" content="&lt;p&gt;As we’re approaching the home stretch of the Spring Data release train currently in development, I think it’s time to give you a brief overview of some of the new features we’re going to introduce with this release.&lt;/p&gt;
&lt;p&gt;In case you’re not aware yet, the release train is a coordinated release of multiple Spring Data modules to make sure they work seamlessly out of the box. The current one is named after the inventor of the relational model &lt;a href=&quot;http://en.wikipedia.org/wiki/Edgar_F._Codd&quot;&gt;Edgar F. Codd&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#spring-data-commons&quot; class=&quot;anchor&quot; name=&quot;spring-data-commons&quot;&gt;&lt;/a&gt;Spring Data Commons&lt;/h2&gt;
&lt;p&gt;As the Spring Data Commons module creates the foundation for all of the other modules contained in the release train, new features in it are also available in the individual store modules.&lt;/p&gt;
" />
<meta name="twitter:creator" content="@odrotbohm" />
<meta name="twitter:image:src" content="https://gravatar.com/avatar/977c74bb044a9d4fa90b305824eda390?s=200" />

<meta property="og:title" content="What&#39;s new in Spring Data Codd RC1?" />
<meta property="og:image" content="https://gravatar.com/avatar/977c74bb044a9d4fa90b305824eda390?s=200" />
<meta property="og:description" content="&lt;p&gt;As we’re approaching the home stretch of the Spring Data release train currently in development, I think it’s time to give you a brief overview of some of the new features we’re going to introduce with this release.&lt;/p&gt;
&lt;p&gt;In case you’re not aware yet, the release train is a coordinated release of multiple Spring Data modules to make sure they work seamlessly out of the box. The current one is named after the inventor of the relational model &lt;a href=&quot;http://en.wikipedia.org/wiki/Edgar_F._Codd&quot;&gt;Edgar F. Codd&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#spring-data-commons&quot; class=&quot;anchor&quot; name=&quot;spring-data-commons&quot;&gt;&lt;/a&gt;Spring Data Commons&lt;/h2&gt;
&lt;p&gt;As the Spring Data Commons module creates the foundation for all of the other modules contained in the release train, new features in it are also available in the individual store modules.&lt;/p&gt;
" />
<meta content="article" property="og:type" />
<meta property="og:article:published_time" content="2014-02-07 13:37:00.0" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link active">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link active">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div></div>
<div class="container-fluid">
<div class="main-body--wrapper">
<div class="row-fluid blog--wrapper">
<article class="span8 mobile-left-pane" id="content">
<header class="desktop-only">
<div class="blog-category active content--title">
<div>Engineering</div>
</div>
<div class="blog-category content--title">
<div>Releases</div>
</div>
<div class="blog-category content--title">
<div>News and Events</div>
</div>
</header>
<div class="blog--container">
<header>
<h1 class="blog--title">What&#39;s new in Spring Data Codd RC1?</h1>
<div class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category">Engineering</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="https://gravatar.com/avatar/977c74bb044a9d4fa90b305824eda390?s=20&amp;d=mm" />
<a class="author" rel="author" href="/team/ogierke">Oliver Drotbohm</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2014-02-07 13:37:00.0">February 07, 2014</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="1390" href="/blog/2014/02/07/what-s-new-in-spring-data-codd-rc1#disqus_thread">
</a></div>
</div>
</header>
<div class="blog--post"><p>As we&rsquo;re approaching the home stretch of the Spring Data release train currently in development, I think it&rsquo;s time to give you a brief overview of some of the new features we&rsquo;re going to introduce with this release.</p><p>In case you&rsquo;re not aware yet, the release train is a coordinated release of multiple Spring Data modules to make sure they work seamlessly out of the box. The current one is named after the inventor of the relational model <a href="https://en.wikipedia.org/wiki/Edgar_F._Codd">Edgar F. Codd</a>.</p><h2><a href="#spring-data-commons" class="anchor" name="spring-data-commons"></a>Spring Data Commons</h2><p>As the Spring Data Commons module creates the foundation for all of the other modules contained in the release train, new features in it are also available in the individual store modules.</p><p>For the Codd release we raised the minimum required Spring version to 3.2.7 and improved our compatibility with Spring 4.0 to provide a seamless experience when updating to the latest and greatest version of Spring so far. When running your application with Spring 4 and Java 8 the Spring Data auditing feature is now able to populate the creation and modification dates of your entity with JSR-310 types:</p>
<pre><code class="prettyprint java">abstract class BaseEntity {
    
    @CreatedDate ZonedDateTime createdDate;
    @LastModifiedDate ZonedDateTime modifiedDate;
}
</code></pre><p>Also, the auditing can now generally be activated using the module specific <code>@Enable…Auditing</code> annotation (read more on that in Thomas Darimont&rsquo;s [blog post](<br /><a href="https://spring.io/blog/2013/12/04/what-s-new-in-spring-data-mongodb-1-4-m1">https://spring.io/blog/2013/12/04/what-s-new-in-spring-data-mongodb-1-4-m1</a>) on the new features introduced in the first milestone).</p><p>As of Codd, Spring Data repositories will be instantiated eagerly to make sure the verification of the repository interface is triggered eagerly, even without an injection point explicitly requesting the repository instance at container startup. To fall back to the legacy behavior, use the <code>@Lazy</code> annotation on the repository interface, as you are used to with other Spring bean definitions.</p><h3><a href="#uri-templates-for-pagination-links" class="anchor" name="uri-templates-for-pagination-links"></a>URI templates for pagination links</h3><p>In the area of web support for Spring MVC, Spring Data&rsquo;s <code>PagedResourcesAssembler</code> now creates page navigation links that adhere to the standard defined in <a href="https://tools.ietf.org/html/rfc6570">RFC-6570</a>. So assuming you have a Spring MVC controller like this one:</p>
<pre><code class="prettyprint java">@Controller
class OrderController {
    
    @RequestMapping(&quot;/orders&quot;)
    HttpEntity&lt;PagedResources&lt;Resource&lt;Order&gt;&gt;&gt; showOrders(Pageable pageable, 
        PagedResourcesAssembler&lt;Order&gt; assembler) {

        Page&lt;Order&gt; orders = orderRepository.findAll(pageable);
        return new ResponseEntity&lt;&gt;(assembler.toResource(orders), HttpStatus.OK);
    }
}
</code></pre><p>The <code>PagedResourcesAssembler</code> will inspect the given <code>Page</code> of <code>Order</code>s, render the content, the page meta-information and also add the <code>prev</code> and <code>next</code> links as appropriate.</p>
<pre><code class="prettyprint javascript">GET /orders?page=0&amp;size=10
Accept: application/hal+json

200 OK
{ _links : { self : { href : &quot;/orders{?page,size,sort}&quot;,
                      templated : true },
             next : { href : &quot;/orders?page=1&amp;size=10&quot; }},

  _embedded :  { orders : [ … ] },

  page : {
    size : 1,
    totalElements : 2,
    totalPages : 2,
    number : 0
  }
}
</code></pre><p>As you can see, the <code>self</code> link clearly indicates the parameters the resource accepts to customize the response. The <code>next</code> link provides access to the next page corresponding to the current parameters given.</p><p>To round things off, the Commons module has seen significant changes to the way the configuration is evaluated which will significantly improve the bootstrap time, especially in applications with a lot of repositories.</p><h2><a href="#spring-data-jpa" class="anchor" name="spring-data-jpa"></a>Spring Data JPA</h2><p>The Spring Data JPA module has mostly seen internal improvements and new features regarding the interaction with JPA and CDI: we upgraded to EclipseLink 2.5.1 and improve the compatibility with Hibernate 4.3 to make sure our users can work with JPA 2.1 based persistence providers.</p><h3><a href="#constructor-injection-for-entitymanagers" class="anchor" name="constructor-injection-for-entitymanagers"></a>Constructor injection for EntityManagers</h3><p>A feature that has been requested repeatedly has made it into this release as well: the ability to inject <code>EntityManager</code> instances into constructors when designing application components. If you write classes that need access to a JPA <code>EntityManager</code>, you usually use <code>@PersistenceContext</code> to trigger the injection of it. However, we generally consider constructor injection a best practice for a <a href="http://olivergierke.de/2013/11/why-field-injection-is-evil/">variety of reasons</a>, so that it would be useful not having to fallback to field injection for <code>EntityManagers</code>.</p><p>Unfortunately, the <code>@PersistenceContext</code> annotation cannot be used on constructor arguments currently. I&rsquo;ve filed <a href="https://java.net/jira/browse/JPA_SPEC-72">a ticket in the JPA bug tracker</a> for that but we certainly don&rsquo;t have to wait for JPA 2.2 to be released to see that functionality. As of version 1.5 of Spring Data JPA you&rsquo;ll be able to write application components like this:</p>
<pre><code class="prettyprint java">class UserRepositoryImpl implements UserRepositoryCustom {
    
    private final EntityManager em;

    @Autowired // or @Inject
    public UserRepositoryImpl(EntityManager em) {
        this.em = em;
    }

    …
}
</code></pre><p>By default, we will inject the <code>EntityManager</code> instance created by the <code>EntityManagerFactoryBean</code> declared in your <code>ApplicationContext</code>. If you have multiple ones defined, you can use <code>@Qualifier</code> to point to the bean name of the <code>EntityManagerFactoryBean</code> you want to obtain the <code>EntityManager</code> from.</p><h3><a href="#eager-repository-instantiation-in-cdi-environments" class="anchor" name="eager-repository-instantiation-in-cdi-environments"></a>Eager repository instantiation in CDI environments</h3><p>When using Spring Data repositories in a Spring container, the repositories are instantiated eagerly. Even before Codd, they were instantiated as soon as a client component requested a repository through an injection point. So whenever you get a repository injected into a client, you are assured to get a <em>fully initialized application component</em>, simply as the Spring component model guarantees this.</p><p>In a CDI world, however, things are slightly different. When you access an application component, there&rsquo;s no guarantee its dependencies are already initialized as in the CDI component model it&rsquo;s fine to just inject a proxy and trigger the actual instance creation on first usage. </p><p>Practically this can result in a Spring Data repository getting instantiated while your application code is already running a JPA transaction. Part of the instantiation of the repository is checking for JPA named queries to back query methods. According to the JPA spec, the non-existence of such a named query (which is a totally expected state in a Spring Data context) has to be expressed by throwing an exception and this exception has to trigger a transaction rollback in JPA by definition.</p><p>This means that by intermingling the application component initialization with running business code in CDI you risk to break the latter when the former is invoked. Unfortunately, there&rsquo;s no way to enforce eager instantiation of application components out of the box in CDI. There are a few <a href="https://gist.github.com/mojavelinux/635719">container specific approaches</a> but none of them work reliably on all of them (if you happen to find one, I&rsquo;d be highly interested).</p><p>With Spring Data JPA 1.5 we&rsquo;re going to ship an <code>@Eager</code> annotation that will cause our CDI extension trigger repository and thus avoid the overlap of application component creation and the execution of business code.</p><h2><a href="#spring-data-rest" class="anchor" name="spring-data-rest"></a>Spring Data REST</h2><p>The very core changes in Spring Data REST we&rsquo;re significant refactorings especially in the mapping configuration and customization parts of the module. This also included changes in the default relation types we expose for individual resources.</p><p>For each repository, Spring Data REST exposes a dedicated REST resource that follows the collection resource pattern. This means we have a dedicated resource for the collection of entities as well as individual ones for each item in the collection.</p><p>As proper REST clients are not supposed to create the URIs they interact with themselves but rather use hypermedia to follow links provided by the server, we need to expose two different relation types to indicate the difference between a collection resource and an item resource.</p><p>As of Spring Data REST 2.0, the relation type for the item resource is derived from the name of the domain class the repository manages. The relation type for the collection resource is then derived from that by pluralizing the item resource rel using the <a href="https://github.com/atteo/evo-inflector">Evo Inflector</a> library. Thus, for a repository managing <code>Order</code> instances, you&rsquo;ll see links named <code>orders</code> to point to the collection resource and <code>order</code> pointing to the item resources.</p><p>This change in relation types being a breaking one for hypermedia clients of Spring Data REST 1.x bases services is one of the major reasons, the version of the module is raised to 2.0. Another aspect to this is that with M1 of the module we moved to <a href="http://stateless.co/hal_specification.html">HAL</a> as default media type to be exposed by Spring Data REST. We&rsquo;re looking into support for other hypermedia formats just as <a href="http://amundsen.com/media-types/collection/">Collection+JSON</a> and the like but HAL seems to gain quite a lot of attention. Amazon just recently released their <a href="https://docs.aws.amazon.com/appstream/latest/developerguide/rest-api.html">AppStream REST API</a> and use HAL as the representation format.</p><h2><a href="#spring-data-neo4j-mongodb" class="anchor" name="spring-data-neo4j-mongodb"></a>Spring Data Neo4j / MongoDB</h2><p>The biggest change (and hence the move to a 3.0 version number) in the Spring Data Neo4j module ist the support for Neo4j 2.0. So to benefit from the latest and greatest features of that release, make sure you give the Codd release candidate a try.</p><p>On the MongoDB side of things the most important new feature is the support for Spring Expression language in the aggregation framework. Spring Data engineer Thomas Darimont had a <a href="https://spring.io/blog/2013/12/04/what-s-new-in-spring-data-mongodb-1-4-m1">detailed blog post</a> on all features that we already shipped with M1 of Codd in case you missed that.</p><p>As indicated above, of course all new features in Spring Data Commons introduced in Codd are actually bubbling into both the Neo4j and MongoDB module as well.</p><h2><a href="#outlook" class="anchor" name="outlook"></a>Outlook</h2><p>The GA release is planned for the end of February 2014. We have a <a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Codd">curated changelog</a> that lists all important features introduced in this release in the Spring Data Commons wiki.</p><p>We appreciate any pre-release testing and reporting potential issues found in our <a href="http://jira.springsource.org">JIRA</a> instance.</p></div>
</div>
<section id="disqus_thread"></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 1390;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a class="dsq-brlink" href="https://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a>
<div class="mobile-only">
<p><a href="/blog">
<i class="icon-chevron-left"></i>
Back
</a></p>
</div>
</article>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<div class="icon blog-icon all-posts"></div>
<a href="/blog">All Posts</a>
<a class="pull-right" href="/blog.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category active">
<div class="icon blog-icon engineering"></div>
<a href="/blog/category/engineering">Engineering</a>
<a class="pull-right" href="/blog/category/engineering.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon releases"></div>
<a href="/blog/category/releases">Releases</a>
<a class="pull-right" href="/blog/category/releases.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon news-and-events"></div>
<a href="/blog/category/news">News and Events</a>
<a class="pull-right" href="/blog/category/news.atom"><i class="icon-rss"></i></a>
</li>
</ul>
<ul class="social-btn--container">
<a class="social-btn twitter" href="https://twitter.com/springcentral"></a>

<a class="social-btn linkedin" href="https://www.linkedin.com/groups/46964"></a>
<a class="social-btn youtube" href="/videos"></a>
</ul>
<div id="blog-sidebar-newsletter">
<p>Get updates from The Spring Team delivered to your inbox</p>
<script src="https://app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_4723"></form>
<script>
        MktoForms2.loadForm("https://app-sj05.marketo.com", "625-IUJ-009", 4723, function(form){
          form.onSuccess(function(values, followUpUrl) {
            form.getFormElem().html("<p>Thank you!</p>");
            return false;
          });
        });
      </script>
</div>
</div>
</aside>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>