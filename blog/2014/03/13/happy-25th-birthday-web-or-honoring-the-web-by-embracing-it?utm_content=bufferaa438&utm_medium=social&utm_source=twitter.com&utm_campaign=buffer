<!DOCTYPE html>
<html data-code-prettify="" data-mobile-support="" data-search="">
<head>
<title>Happy 25th Birthday, Web! or: Honoring the web by embracing It</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<link href="/css/blog-92993c3ec6808bded45b277c18d7d621.css" rel="stylesheet" type="text/css" />

<meta content="summary" name="twitter:card" />
<meta content="@springcentral" name="twitter:site" />
<meta name="twitter:title" content="Happy 25th Birthday, Web! or: Honoring the web by embracing It" />
<meta name="twitter:description" content="&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/BinE4F6CYAAepRt.jpg&quot; width=&quot;500&quot; style=&quot;float:left; margin-right: 10px;&quot;&gt; &lt;/p&gt;
&lt;p&gt;Yesterday, the 12th of March, 2014, was &lt;a href=&quot;http://www.slate.com/blogs/future_tense/2014/03/12/techniversaries_detract_from_the_25th_anniversary_of_the_internet.html&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://twitter.com/BerkeleyLab/status/443827636159012864&quot;&gt;25th anniversary&lt;/a&gt; &lt;a href=&quot;http://www.reddit.com/r/IAmA/comments/2091d4/i_am_tim_bernerslee_i_invented_the_www_25_years/&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.bbc.com/news/uk-26540635&quot;&gt;Sir&lt;/a&gt; &lt;a href=&quot;http://www.cnn.com/2014/03/12/tech/web/tim-berners-lee-web-freedom/&quot;&gt;Tim&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Tim_Berners-Lee&quot;&gt;Berner’s&lt;/a&gt; &lt;a href=&quot;http://www.theverge.com/2014/3/12/5499258/tim-berners-lee-asks-for-net-neutrality-on-internets-25th-birthday&quot;&gt;Lee&lt;/a&gt; having invented the &lt;em&gt;web&lt;/em&gt;. As he explains: “I just had to take the hypertext idea and connect it to the Transmission Control Protocol and domain name system ideas and—_ta-da!_—the World Wide Web.” &lt;em&gt;Elementary&lt;/em&gt;, really. (Hah!)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/File:First_Web_Server.jpg&quot;&gt;Pictured&lt;/a&gt; (taken from Wikimedia) is the original NeXT workstation (whose operating system , &lt;a href=&quot;http://en.wikipedia.org/wiki/NeXTSTEP&quot;&gt;NeXT Step&lt;/a&gt;, underpins today’s OS X and iOS design) on which Sir Tim Berners-Lee put together the initial HTTP service and client. &lt;/p&gt;
" />
<meta name="twitter:creator" content="@starbuxman" />
<meta name="twitter:image:src" content="https://gravatar.com/avatar/fb22593caf24e4bb4c98d467cdd247e6?s=200" />

<meta property="og:title" content="Happy 25th Birthday, Web! or: Honoring the web by embracing It" />
<meta property="og:image" content="https://gravatar.com/avatar/fb22593caf24e4bb4c98d467cdd247e6?s=200" />
<meta property="og:description" content="&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/BinE4F6CYAAepRt.jpg&quot; width=&quot;500&quot; style=&quot;float:left; margin-right: 10px;&quot;&gt; &lt;/p&gt;
&lt;p&gt;Yesterday, the 12th of March, 2014, was &lt;a href=&quot;http://www.slate.com/blogs/future_tense/2014/03/12/techniversaries_detract_from_the_25th_anniversary_of_the_internet.html&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://twitter.com/BerkeleyLab/status/443827636159012864&quot;&gt;25th anniversary&lt;/a&gt; &lt;a href=&quot;http://www.reddit.com/r/IAmA/comments/2091d4/i_am_tim_bernerslee_i_invented_the_www_25_years/&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.bbc.com/news/uk-26540635&quot;&gt;Sir&lt;/a&gt; &lt;a href=&quot;http://www.cnn.com/2014/03/12/tech/web/tim-berners-lee-web-freedom/&quot;&gt;Tim&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Tim_Berners-Lee&quot;&gt;Berner’s&lt;/a&gt; &lt;a href=&quot;http://www.theverge.com/2014/3/12/5499258/tim-berners-lee-asks-for-net-neutrality-on-internets-25th-birthday&quot;&gt;Lee&lt;/a&gt; having invented the &lt;em&gt;web&lt;/em&gt;. As he explains: “I just had to take the hypertext idea and connect it to the Transmission Control Protocol and domain name system ideas and—_ta-da!_—the World Wide Web.” &lt;em&gt;Elementary&lt;/em&gt;, really. (Hah!)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/File:First_Web_Server.jpg&quot;&gt;Pictured&lt;/a&gt; (taken from Wikimedia) is the original NeXT workstation (whose operating system , &lt;a href=&quot;http://en.wikipedia.org/wiki/NeXTSTEP&quot;&gt;NeXT Step&lt;/a&gt;, underpins today’s OS X and iOS design) on which Sir Tim Berners-Lee put together the initial HTTP service and client. &lt;/p&gt;
" />
<meta content="article" property="og:type" />
<meta property="og:article:published_time" content="2014-03-13 15:08:00.0" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link active">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link active">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div></div>
<div class="container-fluid">
<div class="main-body--wrapper">
<div class="row-fluid blog--wrapper">
<article class="span8 mobile-left-pane" id="content">
<header class="desktop-only">
<div class="blog-category active content--title">
<div>Engineering</div>
</div>
<div class="blog-category content--title">
<div>Releases</div>
</div>
<div class="blog-category content--title">
<div>News and Events</div>
</div>
</header>
<div class="blog--container">
<header>
<h1 class="blog--title">Happy 25th Birthday, Web! or: Honoring the web by embracing It</h1>
<div class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category">Engineering</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="https://gravatar.com/avatar/fb22593caf24e4bb4c98d467cdd247e6?s=20&amp;d=mm" />
<a class="author" rel="author" href="/team/jlong">Josh Long</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2014-03-13 15:08:00.0">March 13, 2014</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="1439" href="/blog/2014/03/13/happy-25th-birthday-web-or-honoring-the-web-by-embracing-it#disqus_thread">
</a></div>
</div>
</header>
<div class="blog--post"><p><img src="https://pbs.twimg.com/media/BinE4F6CYAAepRt.jpg" width="500" style="float:left; margin-right: 10px;" /> </p><p>Yesterday, the 12th of March, 2014, was <a href="http://www.slate.com/blogs/future_tense/2014/03/12/techniversaries_detract_from_the_25th_anniversary_of_the_internet.html">the</a> <a href="https://twitter.com/BerkeleyLab/status/443827636159012864">25th anniversary</a> <a href="https://www.reddit.com/r/IAmA/comments/2091d4/i_am_tim_bernerslee_i_invented_the_www_25_years/">of</a> <a href="https://www.bbc.com/news/uk-26540635">Sir</a> <a href="https://www.cnn.com/2014/03/12/tech/web/tim-berners-lee-web-freedom/">Tim</a> <a href="https://en.wikipedia.org/wiki/Tim_Berners-Lee">Berner&rsquo;s</a> <a href="https://www.theverge.com/2014/3/12/5499258/tim-berners-lee-asks-for-net-neutrality-on-internets-25th-birthday">Lee</a> having invented the <em>web</em>. As he explains: &ldquo;I just had to take the hypertext idea and connect it to the Transmission Control Protocol and domain name system ideas and—_ta-da!_—the World Wide Web.&rdquo; <em>Elementary</em>, really. (Hah!)</p><p><a href="https://en.wikipedia.org/wiki/File:First_Web_Server.jpg">Pictured</a> (taken from Wikimedia) is the original NeXT workstation (whose operating system , <a href="https://en.wikipedia.org/wiki/NeXTSTEP">NeXT Step</a>, underpins today&rsquo;s OS X and iOS design) on which Sir Tim Berners-Lee put together the initial HTTP service and client. </p><p>As an aside: I&rsquo;ve always wondered what it would be like to be able to have been there, in that lab. To perchance accidentally trip and fall and unplug his machine and (thus) the entire web - Ha! Just imagine how much more productive you&rsquo;d be if - for one hour - you could just turn the web off today! :)</p><p>HTTP had so much of the design <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">right in the first revisions of HTTP</a>. It was a fairly simple protocol to implement. It is stateless, which makes it easy to partition services. By 1.0 in 1996, it supported querying, and writing data and some basic client/server negotiation. It uses headers to annotate requests and responses, providing an in-built mechanism for clients and services to <em>enrich</em> the payloads conveyed payloads. HTTP was built to be used by disparate clients with disparate encodings. It was designed to benefit from network elements like caches and proxies. HTTP 1.1 was (formally) content-agnostic and had a concept of a content-type (including the <code>Accept</code> and <code>Content-Type</code> headers). </p><p>By the time <a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a> (who also worked on HTTP 1.1) put together his famous doctoral dissertation for the University of California, Irvine, introducing the REST architectural constraint, the platform was already there for the building! <a href="https://wikipedia.org/wiki/REST">REST</a> formalized some of the good ideas already in HTTP. It mapped the state mutations implied by HTTP verbs to the lifecycle of data. Think of REST as <em>HTTP: The Service-Oriented Parts</em>. </p><p>HTTP has taken us a long way. REST, too, has been a game changer. REST powers the mobile revolution, it drove the RIA-revolution, and - I&rsquo;d argue - it has delivered the hitherto unicorn-like realization of <a href="https://en.wikipedia.org/wiki/Service-oriented_architecture"><em>SOA</em></a> for the masses. </p><h2><a href="#an-overview-of-spring-rsquo-s-http-and-rest-support" class="anchor" name="an-overview-of-spring-rsquo-s-http-and-rest-support"></a>An Overview of Spring&rsquo;s HTTP and REST Support</h2><p>The Spring platform <em>breathes</em> HTTP and REST. Indeed, the first lines of code ever written for the Spring framework were in support of <em>web programming</em>. The Spring frameworks offer a very rich stack for building HTTP and REST based applications.</p><p>In this post, I hope to provide a brief tour of some of Spring&rsquo;s rich REST support.</p><h3><a href="#the-smarter-client" class="anchor" name="the-smarter-client"></a>The Smarter Client</h3><p>The <a href="https://projects.spring.io/spring-framework/">Spring framework</a> includes the <code>RestTemplate</code> which reduces common HTTP operations to one-liners in the same style as the familiar <a href="https://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html"><code>JdbcTemplate</code></a> and the new NIO-2 powered <a href="https://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/web/client/AsyncRestTemplate.html"><code>AsyncRestTemplate</code></a>. From the docs, &ldquo;it simplifies communication with HTTP servers, and enforces RESTful principles. It handles HTTP connections, leaving application code to provide URLs (with possible template variables) and extract results.&rdquo; Yup. </p><p>The <code>RestTemplate</code> supports an interceptor model that can be used to plugin things like security, auditing, session handling, and much more. In particular, it can be made to transparently handle stateful HTTP-based exchanges like <a href="https://oauth.net/">OAuth</a>. </p><p>OAuth is a protocol to allow secure authorization in a simple and standard way from web, mobile and desktop applications. It secures an innumerable many web services out there including the likes of Facebook, Twitter, GitHub, LinkedIn, TripIt, and Google&rsquo;s various APIs. If you want to consume web services on the web, OAuth is hard to ignore and - thanks to <a href="https://projects.spring.io/spring-social/"> Spring Social </a> - you don&rsquo;t need to! </p><p><img src="https://pbs.twimg.com/media/BinXaxRCUAQIRAW.jpg:large" width="700" alt="Building atop, or integrating with, another platform can give your application new reach." /> </p><p>Spring Social is an umbrella project. It provides at its foundation the machinery for building OAuth service clients (using the <code>RestTemplate</code>) and then layers on top of that type-safe, Java bindings for various APIs, including <a href="https://projects.spring.io/spring-social-twitter">Spring Social Twitter</a>, <a href="https://projects.spring.io/spring-social-facebook/">Spring Social Facebook</a>, and <a href="https://projects.spring.io/spring-social-linkedin/">Spring Social LinkedIn</a>. There are <em>many</em> other (<a href="https://github.com/spring-projects/spring-social/wiki/Api-Providers">known</a> and unknown) third party bindings for numerous alternative APIs. </p><p>Spring Social further provides tight integration with Spring MVC applications, handling the OAuth authentication <em>dance</em> for you. Spring Social makes consuming secured OAuth APIs dead simple, and supports other common use cases like <em>Sign In With Facebook</em>. </p><p>The <a href="https://spring.io/spring-android">Spring for Android project</a> delivers the <code>RestTemplate</code> for Android clients. You can also use Spring Social clients from Android, extending your reach even further. </p><p>You can find numerous <em>Getting Started guides</em> [detailing how to consume REST services](detailing how to consume REST services) (among other things!), not just with the <a href="https://spring.io/guides/gs/consuming-rest/"><code>RestTemplate</code></a>, but <a href="https://spring.io/guides?filter=Consuming">from Android, popular JavaScript clients, and more</a>. There are also handy getting-started guides <a href="https://spring.io/guides?filter=Twitter">to using Spring Social Twitter</a> and <a href="https://spring.io/guides?filter=Twitter">Facebook</a>, for a start.</p><h3><a href="#the-wide-scalable-secure-web" class="anchor" name="the-wide-scalable-secure-web"></a>The Wide, Scalable, Secure, Web</h3><p>Spring MVC is distributed as part <a href="https://spring.io/spring-framework">of the Spring framework</a>. Spring MVC provides a very rich foundation for building HTTP and REST-based applications. REST is, as I mentioned earlier, an architectural constraint, <em>not</em> a hard and fast standard. Instead, there are guidelines. This is a strength and a virtue. REST can be a moving target. Dr. Leaonard Richardson devised what&rsquo;s called the Richardson Maturity Model, which itself provides a matrix against which <a href="http://martinfowler.com/articles/richardsonMaturityModel.html">you can judge the compliance of a given REST API with RESTful principles</a>. </p><p>It&rsquo;s not hard to be at level 2 with Spring MVC&rsquo;s core REST support. Taking it to the next level, 3, involves understanding a little bit about <a href="https://en.wikipedia.org/wiki/Hypermedia"><em>hypermedia</em></a>, or the capacity of HTTP resources to be connected together through <em>links</em>, and HATEOAS. From the Wikipedia page on <a href="https://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>: &ldquo;a REST client enters a REST application through a simple fixed URL. All future actions the client may take are discovered within resource representations returned from the server. The media types used for these representations, and the link relations they may contain, are standardized. The client transitions through application states by selecting from the links within a representation or by manipulating the representation in other ways afforded by its media type. In this way, RESTful interaction is driven by hypermedia, rather than out-of-band information.&rdquo; </p><p>There are many fine guides on <a href="https://spring.io/guides?filter=Building%20a%20RESTful">building</a> REST web services, and <a href="https://spring.io/guides/gs/securing-web/">securing them</a>. There <a href="https://github.com/joshlong/the-spring-rest-stack">are of course</a> <a href="https://github.com/joshlong/boot-it-up">many</a> other <a href="https://github.com/olivergierke/spring-restbucks">fine</a> examples out there, too. </p><p><a href="https://spring.io/projects/spring-hateoas">Spring HATEOAS</a> is a layer atop Spring MVC that lets you work in terms of <em>resources</em> that themselves have payloads and a collection of <em>links</em> assigned to them. These links represent a table of URIs that are <em>related</em> to the resource to which they&rsquo;re attached. </p><p>Working with Spring HATEOAS and Spring MVC is as easy as it can be (short of not writing any code at all!) But when you think about it, writing next-to-no code would be pretty neat, too&hellip; If you think about it, REST resources are HTTP-interfaces to data. They are discharged with moving the data represented by resources through their lifecycle, from creation, reads, updates and deletion. If you&rsquo;ve ever used the Spring Data repository support, then you can probably see where I&rsquo;m going here. <a href="https://projects.spring.io/spring-data-rest/">Spring Data REST</a> lets you declaratively expose your Spring Data repositories (which themselves can be as simple as defining an interface that extends another one!) as a REST endpoint. Not bad! </p><p>And, last but certainly not least, the venerable, open-source, and easy-to-use <a href="https://tomcat.apache.org/">Apache Tomcat</a> web server drives a lot of the Java-powered web. Apache HTTPD drives even more of it, and </p><h3><a href="#so-what-about-security" class="anchor" name="so-what-about-security"></a>So, what about security?</h3><p>An open web application or REST API is like an wide open, exposed database; it will <em>probably</em> not be what you wanted. <em>Securing a web application</em> means many things to many people: is the connection between the client and the server encrypted? Does the application know who is making the request? Are we securing a web application? A REST service? A messaging channel? Thankfully, there needn&rsquo;t be more than one answer: <a href="https://spring.io/projects/spring-security">Spring Security</a>. Spring Security is your one-stop security shop, complete with integrations for backend identity providers (LDAP, Active Directory), authentication and authorization, encryption and support for common functionality like application sign-in and sign-out. </p><p>You might, for example, use Spring Security OAuth <a href="https://spring.io/projects/spring-security-oauth">to secure your REST endpoint</a>, and of course you could then consume this from Spring Social! </p><h3><a href="#boot-is-where-it-rsquo-s-at" class="anchor" name="boot-is-where-it-rsquo-s-at"></a>Boot Is Where It&rsquo;s At</h3><p><a href="https://spring.io/projects/spring-boot">Spring Boot</a> provides an ideal entry-point into all of these technologies. Applications deployed with Spring Boot come with management and metrics, out of the box. Most of the aforementioned getting started guides are based on Spring Boot. There&rsquo;s a lot to recommend Spring Boot for REST development, but one metric must <a href="https://twitter.com/david_syer/status/365367862170353667">surely be how Tweetable it is!</a>. And, of course, another is that Spring Boot makes building a Spring application as easy as pie, and that it comes packed with all sorts of features that are designed to make simpler the task of getting to production in a consistent way. </p><p>The following code is <a href="https://github.com/joshlong/sparklr-boot">a slight derivation</a> of <a href="https://github.com/dsyer/sparklr-boot">Dr. David Syer&rsquo;s <em>epic</em> example demonstrating how to use Spring Boot and Spring Security OAuth to secure a REST endpoint</a>. All I&rsquo;ve done is add a Spring Data REST-powered JPA repository and some seed data (see the repository). Spring Data REST babysits the database (a default, embedded H2 <code>javax.sql.DataSource</code>, though we could as easily have used any other <code>DataSource</code> or, indeed, any of a number of other backend NoSQL stores entirely! </p>
<pre><code class="prettyprint java">package demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.rest.core.annotation.RepositoryRestResource;
import org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.OAuth2ResourceServerConfigurer;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

// standard @Configuration class 
@Configuration
@ComponentScan
@EnableAutoConfiguration
@Import(RepositoryRestMvcConfiguration.class) // import Spring Data REST
public class Application {

    public static final String CRM_RESOURCE_ID = &quot;crm&quot;;
    
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
	
	    @Configuration
    @EnableResourceServer
    protected static class ResourceServerConfiguration
    	 extends ResourceServerConfigurerAdapter {

		// tell SS OAuth which URI paths to secure (optional!)
        @Override
        public void configure(HttpSecurity http) throws Exception {
            // @formatter:off
            http
                    .requestMatchers().antMatchers(&quot;/*&quot;, &quot;/admin/beans&quot;).and()
                    .authorizeRequests()
                    .anyRequest().access(&quot;#oauth2.hasScope(&#39;read&#39;)&quot;);
            // @formatter:on
        }
		
        @Override
        public void configure(OAuth2ResourceServerConfigurer resources) throws Exception {
            resources.resourceId(CRM_RESOURCE_ID);
        }

    }

    @Configuration
    @EnableAuthorizationServer
    protected static class OAuth2Configuration
    		 extends AuthorizationServerConfigurerAdapter {
		
        @Autowired
        private AuthenticationManager authenticationManager;

		// plugin a Spring Security AuthenticationManager. One is created for us by Boot,
		// though we could plugin to *any* Identity Provider (LDAP, ActiveDirectory, etc)
        @Override
        public void configure(OAuth2AuthorizationServerConfigurer oauthServer) throws Exception {
            oauthServer.authenticationManager(authenticationManager);
        }

        @Override
        public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
            // @formatter:off
            
			// we could describe multiple clients with varying settings
            clients.inMemory()    
            		 .withClient(&quot;ios-crm&quot;)  // describe how our iOS client should connect
                    .authorizedGrantTypes(&quot;client_credentials&quot;, &quot;password&quot;)
                    .authorities(&quot;ROLE_CLIENT&quot;)
                    .scopes(&quot;read&quot;)
                    .resourceIds(CRM_RESOURCE_ID)
                    .secret(&quot;secret&quot;);
            // @formatter:on
        }

    }
}


// a Spring Data JPA repository that&#39;s 
// exposed as a REST endpoint using Spring Data REST
@RepositoryRestResource
interface CustomerRepository extends JpaRepository&lt;Customer, Long&gt; {
}

// JPA entity.
@Entity
class Customer {

    @Id
    @GeneratedValue
    private Long id;
    private String firstName, lastName;


    Customer() {
    } // for JPA

    public Customer(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getLastName() {
        return lastName;
    }

    public Long getId() {
        return id;
    }

    public String getFirstName() {
        return firstName;
    }
}

</code></pre><p>Not bad!</p><h2><a href="#the-next-25" class="anchor" name="the-next-25"></a>The Next 25</h2><p>It&rsquo;s hard to guess what&rsquo;s going to happen in the long term. In the short term, though, there are some interesting developments to watch. Layer 7, a CA technologies company, has just released results of a survey focused on API design and deployment. There are many takeaways from the survey, so be sure to read it, but one thing I thought particularly promising: <a href="http://www.infoq.com/news/2014/03/ca-api-survey">a predicted growth in Hypermedia-aware APIs among API developers</a>. Java 8, due very soon, will sport <a href="http://blog.ivanristic.com/2014/03/ssl-tls-improvements-in-java-8.html">significant SSL/TLS improvements</a>, improving its security story on the open web further still. Apache Tomcat 8 is around the corner. </p><p>Many of the technical wrinkles have been ironed out and the web has become a part of everyday life. For many developers, the question isn&rsquo;t whether REST is a part of the architecture, it&rsquo;s how quickly REST services can be stood up, or managed. <a href="http://martinfowler.com/articles/microservices.html">Microservices</a>, for example, is an architectural style tending towards loosely-coupled, singly-focused, tiny REST services. </p><p>In Spring we have a rich toolset for building on the amazing, ubiquitous, ceaselessly growing platform of the web. The next 25 are sure to be amazing.</p></div>
</div>
<section id="disqus_thread"></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 1439;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a class="dsq-brlink" href="https://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a>
<div class="mobile-only">
<p><a href="/blog">
<i class="icon-chevron-left"></i>
Back
</a></p>
</div>
</article>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<div class="icon blog-icon all-posts"></div>
<a href="/blog">All Posts</a>
<a class="pull-right" href="/blog.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category active">
<div class="icon blog-icon engineering"></div>
<a href="/blog/category/engineering">Engineering</a>
<a class="pull-right" href="/blog/category/engineering.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon releases"></div>
<a href="/blog/category/releases">Releases</a>
<a class="pull-right" href="/blog/category/releases.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon news-and-events"></div>
<a href="/blog/category/news">News and Events</a>
<a class="pull-right" href="/blog/category/news.atom"><i class="icon-rss"></i></a>
</li>
</ul>
<ul class="social-btn--container">
<a class="social-btn twitter" href="https://twitter.com/springcentral"></a>

<a class="social-btn linkedin" href="https://www.linkedin.com/groups/46964"></a>
<a class="social-btn youtube" href="/videos"></a>
</ul>
<div id="blog-sidebar-newsletter">
<p>Get updates from The Spring Team delivered to your inbox</p>
<script src="https://app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_4723"></form>
<script>
        MktoForms2.loadForm("https://app-sj05.marketo.com", "625-IUJ-009", 4723, function(form){
          form.onSuccess(function(values, followUpUrl) {
            form.getFormElem().html("<p>Thank you!</p>");
            return false;
          });
        });
      </script>
</div>
</div>
</aside>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>