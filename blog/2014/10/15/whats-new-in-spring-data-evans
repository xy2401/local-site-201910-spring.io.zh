<!DOCTYPE html>
<html data-code-prettify="" data-mobile-support="" data-search="">
<head>
<title>Whats new in Spring Data Evans?</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<link href="/css/blog-92993c3ec6808bded45b277c18d7d621.css" rel="stylesheet" type="text/css" />

<meta content="summary" name="twitter:card" />
<meta content="@springcentral" name="twitter:site" />
<meta name="twitter:title" content="Whats new in Spring Data Evans?" />
<meta name="twitter:description" content="&lt;p&gt;Spring Data Release &lt;a href=&quot;https://spring.io/blog/2014/09/09/spring-data-release-train-evans-goes-ga&quot;&gt;Evans&lt;/a&gt; has been around for a while and it’s more than time to finally introduce you to the latest and greatest features we shipped with it.&lt;/p&gt;
&lt;p&gt;There’s a lot to cover since major enhancements have gone into the commons module. Those changes already have made it into some store modules and will go on and sneak their way into others over time, too. All of them are already available for at least &lt;a href=&quot;http://projects.spring.io/spring-data-jpa/&quot;&gt;Spring Data JPA&lt;/a&gt;. That said, lets jump right in.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#advanced-support-for-java-8&quot; class=&quot;anchor&quot; name=&quot;advanced-support-for-java-8&quot;&gt;&lt;/a&gt;Advanced support for Java 8&lt;/h2&gt;
&lt;p&gt;Java8 has now been around for a while and previous Spring Data release trains already added fundamental support for some of those. With the Evans release train we extended the support significantly.&lt;/p&gt;
" />
<meta name="twitter:creator" content="@stroblchristoph" />
<meta name="twitter:image:src" content="https://gravatar.com/avatar/eeacd6c45e867cb36eb05c9daa5cc2de?s=200" />

<meta property="og:title" content="Whats new in Spring Data Evans?" />
<meta property="og:image" content="https://gravatar.com/avatar/eeacd6c45e867cb36eb05c9daa5cc2de?s=200" />
<meta property="og:description" content="&lt;p&gt;Spring Data Release &lt;a href=&quot;https://spring.io/blog/2014/09/09/spring-data-release-train-evans-goes-ga&quot;&gt;Evans&lt;/a&gt; has been around for a while and it’s more than time to finally introduce you to the latest and greatest features we shipped with it.&lt;/p&gt;
&lt;p&gt;There’s a lot to cover since major enhancements have gone into the commons module. Those changes already have made it into some store modules and will go on and sneak their way into others over time, too. All of them are already available for at least &lt;a href=&quot;http://projects.spring.io/spring-data-jpa/&quot;&gt;Spring Data JPA&lt;/a&gt;. That said, lets jump right in.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#advanced-support-for-java-8&quot; class=&quot;anchor&quot; name=&quot;advanced-support-for-java-8&quot;&gt;&lt;/a&gt;Advanced support for Java 8&lt;/h2&gt;
&lt;p&gt;Java8 has now been around for a while and previous Spring Data release trains already added fundamental support for some of those. With the Evans release train we extended the support significantly.&lt;/p&gt;
" />
<meta content="article" property="og:type" />
<meta property="og:article:published_time" content="2014-10-15 13:20:00.0" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link active">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link active">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div></div>
<div class="container-fluid">
<div class="main-body--wrapper">
<div class="row-fluid blog--wrapper">
<article class="span8 mobile-left-pane" id="content">
<header class="desktop-only">
<div class="blog-category active content--title">
<div>Engineering</div>
</div>
<div class="blog-category content--title">
<div>Releases</div>
</div>
<div class="blog-category content--title">
<div>News and Events</div>
</div>
</header>
<div class="blog--container">
<header>
<h1 class="blog--title">Whats new in Spring Data Evans?</h1>
<div class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category">Engineering</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="https://gravatar.com/avatar/eeacd6c45e867cb36eb05c9daa5cc2de?s=20&amp;d=mm" />
<a class="author" rel="author" href="/team/christophstrobl">Christoph Strobl</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2014-10-15 13:20:00.0">October 15, 2014</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="1764" href="/blog/2014/10/15/whats-new-in-spring-data-evans#disqus_thread">
</a></div>
</div>
</header>
<div class="blog--post"><p>Spring Data Release <a href="https://spring.io/blog/2014/09/09/spring-data-release-train-evans-goes-ga">Evans</a> has been around for a while and it&rsquo;s more than time to finally introduce you to the latest and greatest features we shipped with it.</p><p>There&rsquo;s a lot to cover since major enhancements have gone into the commons module. Those changes already have made it into some store modules and will go on and sneak their way into others over time, too. All of them are already available for at least <a href="https://projects.spring.io/spring-data-jpa/">Spring Data JPA</a>. That said, lets jump right in.</p><h2><a href="#advanced-support-for-java-8" class="anchor" name="advanced-support-for-java-8"></a>Advanced support for Java 8</h2><p>Java8 has now been around for a while and previous Spring Data release trains already added fundamental support for some of those. With the Evans release train we extended the support significantly.</p><p>Java 8&rsquo;s <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html"><code>Optional</code></a> has been a supported return since the <a href="https://spring.io/blog/2014/05/21/what-s-new-in-spring-data-dijkstra">Dijkstra release</a> freeing you of having <code>null</code> checks spread across your code. We simply wrap and unwrap values for you when used as return types with repositories.</p><p>As of the Evans release <a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html">default methods</a> can be used in repository interfaces to e.g. forward parts of the parameters handed into the method to other query methods.</p>
<pre><code class="prettyprint java">interface PersonRepository extends Repository&lt;Person, Long&gt; {
  
  Optional&lt;Customer&gt; findByLastname(String lastname);
  
  default Optional&lt;Customer&gt; findByLastname(Customer customer) {
    return findByLastname(customer == null ? null : customer.getLastname());
  }
}
</code></pre><h2><a href="#enhanced-multi-store-support" class="anchor" name="enhanced-multi-store-support"></a>Enhanced multi-store support</h2><p>Configuring your application to make use of different Spring Data modules has not been without issues so far. E.g. you might want to combine JPA and MongoDB where <code>Customer</code> happens to be a JPA Entity while <code>Order</code> is a MongoDB Document both persisted via according repository interfaces.</p>
<pre><code class="prettyprint java">@Entity
class Customer {

  @Id @GeneratedValue Long id;
  String firstname, lastname;
  // ...
}

@Document
class Order {

  @Id String id;
  Long customerId;
  Date orderDate;
  // ...
}

interface CustomerRepository extends CrudRepository&lt;Customer, Long&gt; {}

interface OrderRepository extends CrudRepository&lt;Order, String&gt; {}
</code></pre><p>Until the Spring Data Evans release you had to manually configure the repository setup for MongoDB and JPA to mutually exclude the interfaces not relevant for the given store. Users usually used separate packages for that.</p><p>Now the repository setup detects that multiple Spring Data modules are on the classpath, and automatically restricts the repository scanning and inspect the domain type used by a given repository for store specific annotations such as <code>@Entity</code> and <code>@Document</code> to determine the concrete implementation they belong to. E.g. the Spring Data MongoDB module would drop the (accidentally) detected <code>CustomerRepository</code> as we don&rsquo;t find an <code>@Document</code> annotation.</p><h3><a href="#statically-limiting-results" class="anchor" name="statically-limiting-results"></a>Statically limiting results</h3><p>Dynamically limiting results is no new concept since Spring Data has had <code>Pagable</code> as abstraction since its inception and I bet nearly every Spring Data user is already familiar with something like this:</p>
<pre><code class="prettyprint java">List&lt;Person&gt; findByLastname(String lastname, Pageable page)
</code></pre><p>This method declaration provides quite some flexibility: clients define the page number, size and a sort order of the elements they want to access. This is great if these values change dynamically (e.g. when you traverse the result set page by page).</p><p>But what if you&rsquo;re always only interested in e.g. the first 10 results and you always want them to be ordered by lastname? This could&rsquo;ve been achieved by statically defining a <code>PageRequest</code> and reusing that for every method invocation. However, that still required the client to hand in the special <code>PageRequest</code>. </p><p>As of Spring Data Evans we now offer you a convenient way to explicitly limit the result set to a certain number of elements by using the keywords <code>top</code> and <code>first</code> followed by an optional positive numeric value (defaulting to 1).</p>
<pre><code class="prettyprint java">List&lt;Person&gt; findTop10ByLastnameOrderByFirstnameDesc(String lastname);
</code></pre><h2><a href="#mongodb-full-text-search" class="anchor" name="mongodb-full-text-search"></a>MongoDB Full Text Search</h2><p>The Evans RC1 release introduced basic <a href="https://spring.io/blog/2014/07/17/text-search-your-documents-with-spring-data-mongodb">text index support</a> for MongoDB 2.6. Using <code>@TextIndexed</code> allows you to mark properties you want to have text search enabled for so that we can go on and create the index for you. Note, that placing <code>@TextIndexed</code> on properties referring to complex types will index all properties of that type. Since scoring is a fundamental part of full text search the <code>@TextScore</code> annotation will assert that any full text query returns the documents score allowing you to order them by relevance.</p>
<pre><code class="prettyprint java">@Document
class BlogPost {

  @Id String id;
  @TextIndexed(weight = 3) String title;
  @TextIndexed(weight = 2) String content;
  @TextIndexed List&lt;String&gt; categories;
  @TextScore Float score;
}
</code></pre><p>That in place, we extended the repository support to accept a <code>TextCriteria</code> instance that will define detailed options about the text search that shall be executed: the terms to be searched for, language options etc.</p>
<pre><code class="prettyprint java">interface BlogPostRepository extends CrudRepository&lt;BlogPost, String&gt; {

	Page&lt;BlogPost&gt; findBy(TextCriteria criteria, Pageable page);

	List&lt;BlogPost&gt; findAllByOrderByScoreDesc(TextCriteria criteria);
}
</code></pre><p>The first query method is quite straight forward. It executes the given <code>TextCriteria</code> and pages the results. The second query method definition combines the given <code>TextCriteria</code> with a standard criteria definition derived from the method name. This shows that you can freely combine text search with standard query easily.</p><h2><a href="#mongodb-query-modifiers" class="anchor" name="mongodb-query-modifiers"></a>MongoDB query modifiers</h2><p>We added <code>@Meta</code> allowing you to define output and behavior of a query. By setting e.g. <code>maxExecutionTime</code> one can define the maximum duration a query may take (in milliseconds). Any execution that exceeds the limit will result in an error. You can also advice MongoDB to only scan through a maximum number of documents and return what has been found until reaching the limit by setting <code>maxScanDocuments</code>, while <code>comment</code> allows you to define text you can search for within the <code>system.profile</code> collection in case you got profiling enabled for your MongoDB instance. </p>
<pre><code class="prettyprint java">@Meta(maxExcecutionTime = 100, comment = &quot;onlyLimitedTime&quot;)
List&lt;Customer&gt; findByFirstname(String firstname);
</code></pre><h2><a href="#configuration-options-for-redis-sentinel" class="anchor" name="configuration-options-for-redis-sentinel"></a>Configuration options for Redis Sentinel</h2><p>Redis 2.8 introduced high-availability support know as <a href="http://redis.io/topics/sentinel">Sentinels</a>. The Redis module of Spring Data Evans adds support to easily configure connecting to a sentinel setup so that your client will be able to continue working in case of re-elections of master nodes in a Redis cluster.</p><p><code>RedisSentinelConfiguration</code> defines where the Sentiels are located so that the <code>ConnectionFactory</code> can set up pooling accordingly. In case of Jedis it will create a <code>JedisSentinelPool</code> for automatic failover. This means that in case your master node goes down, you&rsquo;ll receive, as soon as the Sentinels agreed on a new master, a connection to the new master without the need of any further interaction. </p>
<pre><code class="prettyprint java">@Configuration
class RedisSentinelApplicationConfig {

  @Bean
  RedisConnectionFactory connectionFactory() {
    return new JedisConnectionFactory(sentinelConfig());
  }
  
  @Bean
  RedisSentinelConfiguration sentinelConfig() {
    return new RedisSentinelConfiguration().master(&quot;mymaster&quot;)
      .sentinel(&quot;localhost&quot;, 26379)
      .sentinel(&quot;localhost&quot;, 26380)
      .sentinel(&quot;localhost&quot;, 26381);
  }
}
</code></pre><p>The upcoming Spring Boot 1.2, will even take this even further by automatically picking up the <code>RedisSentinelConfiguration</code> if present and initialize the <code>RedisConnectionFactory</code> accordingly.</p><h2><a href="#schema-support-for-solr" class="anchor" name="schema-support-for-solr"></a>Schema support for Solr</h2><p>Although the <a href="https://cwiki.apache.org/confluence/display/solr/Schema+API">Solr Schema API</a> is not finished yet, we already try to support as much of it as possible. With the Evans release you can now dynamically add missing fields to an existing (managed) schema. To achieve this, we read the existing field definition and compare it against the one derived from the properties of the domain type. To do so we extended the <code>@Indexed</code> annotation a bit. It now allows some fine tuning of the fields to be created as values such as <code>indexed</code>, <code>stored</code> and <code>solrType</code> can be explicitly defined.</p>
<pre><code class="prettyprint java">@Configuration
@EnableSolrRepositories(schemaCreationSupport = true)
class SolrConfiguration {
  
  @Bean
  SolrServer solrServer() {
    return new HttpSolrServer(&quot;http://localhost:8983/solr&quot;);
  }
}

@SolrDocument(solrCoreName = &quot;collection1&quot;)
class ManagedProduct {
  
  @Id String id;
  @Indexed(type = &quot;text_general&quot;) String name;
  @Indexed(name = &quot;cat&quot;) List&lt;String&gt; category;
}
</code></pre><p>As always we are eager to hear from you! Reach out to us on <a href="https://twitter.com/SpringData">Twitter</a>, <a href="https://stackoverflow.com/tags/spring-data">Stackoverflow</a> or <a href="https://jira.spring.io">JIRA</a> to request new features, suggest improvements or report a bug.</p></div>
</div>
<section id="disqus_thread"></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 1764;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a class="dsq-brlink" href="https://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a>
<div class="mobile-only">
<p><a href="/blog">
<i class="icon-chevron-left"></i>
Back
</a></p>
</div>
</article>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<div class="icon blog-icon all-posts"></div>
<a href="/blog">All Posts</a>
<a class="pull-right" href="/blog.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category active">
<div class="icon blog-icon engineering"></div>
<a href="/blog/category/engineering">Engineering</a>
<a class="pull-right" href="/blog/category/engineering.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon releases"></div>
<a href="/blog/category/releases">Releases</a>
<a class="pull-right" href="/blog/category/releases.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon news-and-events"></div>
<a href="/blog/category/news">News and Events</a>
<a class="pull-right" href="/blog/category/news.atom"><i class="icon-rss"></i></a>
</li>
</ul>
<ul class="social-btn--container">
<a class="social-btn twitter" href="https://twitter.com/springcentral"></a>

<a class="social-btn linkedin" href="https://www.linkedin.com/groups/46964"></a>
<a class="social-btn youtube" href="/videos"></a>
</ul>
<div id="blog-sidebar-newsletter">
<p>Get updates from The Spring Team delivered to your inbox</p>
<script src="https://app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_4723"></form>
<script>
        MktoForms2.loadForm("https://app-sj05.marketo.com", "625-IUJ-009", 4723, function(form){
          form.onSuccess(function(values, followUpUrl) {
            form.getFormElem().html("<p>Thank you!</p>");
            return false;
          });
        });
      </script>
</div>
</div>
</aside>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>