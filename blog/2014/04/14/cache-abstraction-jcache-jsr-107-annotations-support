<!DOCTYPE html>
<html data-code-prettify="" data-mobile-support="" data-search="">
<head>
<title>Cache Abstraction: JCache (JSR-107) Annotations Support</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<link href="/css/blog-92993c3ec6808bded45b277c18d7d621.css" rel="stylesheet" type="text/css" />

<meta content="summary" name="twitter:card" />
<meta content="@springcentral" name="twitter:site" />
<meta name="twitter:title" content="Cache Abstraction: JCache (JSR-107) Annotations Support" />
<meta name="twitter:description" content="&lt;p&gt;Spring’s caching abstraction is available &lt;a href=&quot;https://spring.io/blog/2011/02/23/spring-3-1-m1-cache-abstraction&quot;&gt;as from Spring 3.1&lt;/a&gt; and it was about time to show it some more love. In this post, I want to walk you through the major improvement in that area which is the JCache (JSR-107) annotations support.&lt;/p&gt;
&lt;p&gt;As you may have heard, &lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/jcache_is_final_i_repeat&quot;&gt;JSR-107 went final after all&lt;/a&gt;, 13 years after the initial proposal. For those who are familiar with Spring’s caching annotations, the following table describes the mapping between the Spring annotations and the JSR-107 counterpart: &lt;/p&gt;
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Spring &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;JSR-107 &lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@Cacheable&lt;/code&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheResult&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CachePut&lt;/code&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CachePut&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheEvict&lt;/code&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheRemove&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheEvict(allEntries=true)&lt;/code&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheRemoveAll&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;
" />
<meta name="twitter:creator" content="@snicoll" />
<meta name="twitter:image:src" content="https://gravatar.com/avatar/33d0963a20138828608f3f61927545b8?s=200" />

<meta property="og:title" content="Cache Abstraction: JCache (JSR-107) Annotations Support" />
<meta property="og:image" content="https://gravatar.com/avatar/33d0963a20138828608f3f61927545b8?s=200" />
<meta property="og:description" content="&lt;p&gt;Spring’s caching abstraction is available &lt;a href=&quot;https://spring.io/blog/2011/02/23/spring-3-1-m1-cache-abstraction&quot;&gt;as from Spring 3.1&lt;/a&gt; and it was about time to show it some more love. In this post, I want to walk you through the major improvement in that area which is the JCache (JSR-107) annotations support.&lt;/p&gt;
&lt;p&gt;As you may have heard, &lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/jcache_is_final_i_repeat&quot;&gt;JSR-107 went final after all&lt;/a&gt;, 13 years after the initial proposal. For those who are familiar with Spring’s caching annotations, the following table describes the mapping between the Spring annotations and the JSR-107 counterpart: &lt;/p&gt;
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Spring &lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;JSR-107 &lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@Cacheable&lt;/code&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheResult&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CachePut&lt;/code&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CachePut&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheEvict&lt;/code&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheRemove&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheEvict(allEntries=true)&lt;/code&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;code&gt;@CacheRemoveAll&lt;/code&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt;
" />
<meta content="article" property="og:type" />
<meta property="og:article:published_time" content="2014-04-14 14:39:26.797" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link active">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link active">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div></div>
<div class="container-fluid">
<div class="main-body--wrapper">
<div class="row-fluid blog--wrapper">
<article class="span8 mobile-left-pane" id="content">
<header class="desktop-only">
<div class="blog-category active content--title">
<div>Engineering</div>
</div>
<div class="blog-category content--title">
<div>Releases</div>
</div>
<div class="blog-category content--title">
<div>News and Events</div>
</div>
</header>
<div class="blog--container">
<header>
<h1 class="blog--title">Cache Abstraction: JCache (JSR-107) Annotations Support</h1>
<div class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category">Engineering</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="https://gravatar.com/avatar/33d0963a20138828608f3f61927545b8?s=20&amp;d=mm" />
<a class="author" rel="author" href="/team/snicoll">Stéphane Nicoll</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2014-04-14 14:39:26.797">April 14, 2014</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="1491" href="/blog/2014/04/14/cache-abstraction-jcache-jsr-107-annotations-support#disqus_thread">
</a></div>
</div>
</header>
<div class="blog--post"><p>Spring&rsquo;s caching abstraction is available <a href="https://spring.io/blog/2011/02/23/spring-3-1-m1-cache-abstraction">as from Spring 3.1</a> and it was about time to show it some more love. In this post, I want to walk you through the major improvement in that area which is the JCache (JSR-107) annotations support.</p><p>As you may have heard, <a href="https://blogs.oracle.com/theaquarium/entry/jcache_is_final_i_repeat">JSR-107 went final after all</a>, 13 years after the initial proposal. For those who are familiar with Spring’s caching annotations, the following table describes the mapping between the Spring annotations and the JSR-107 counterpart: </p>
<table>
<thead>
<tr>
<th align="center">Spring </th>
<th align="center">JSR-107 </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><code>@Cacheable</code> </td>
<td align="center"><code>@CacheResult</code> </td>
</tr>
<tr>
<td align="center"><code>@CachePut</code> </td>
<td align="center"><code>@CachePut</code> </td>
</tr>
<tr>
<td align="center"><code>@CacheEvict</code> </td>
<td align="center"><code>@CacheRemove</code> </td>
</tr>
<tr>
<td align="center"><code>@CacheEvict(allEntries=true)</code> </td>
<td align="center"><code>@CacheRemoveAll</code> </td>
</tr>
</tbody>
</table><h1><a href="#jcache-annotations" class="anchor" name="jcache-annotations"></a>JCache annotations</h1><p>Let&rsquo;s first look at each annotation and describe how they can be used. This will be a chance to better understand what they support with regards to what you&rsquo;ve been used to with the Spring annotations and more importantly the <strong>new</strong> features that these annotations bring. </p><h2><a href="#cacheresult" class="anchor" name="cacheresult"></a>@CacheResult</h2><p><code>@CacheResult</code> is fairly similar to <code>@Cacheable</code>, the following rewrites <a href="https://spring.io/blog/2011/02/23/spring-3-1-m1-cache-abstraction">the original example</a> using the <code>@CacheResult</code> annotation:</p>
<pre><code class="prettyprint java">@CacheResult(cacheName = &quot;books&quot;)
public Book findBook(ISBN isbn) {...}
</code></pre><p>Keys generation can be customized using the <code>CacheKeyGenerator</code> interface. If no specific implementation is specified, the default implementation, <em>per</em> spec, takes all parameters unless one or more parameters are annotated with the <code>@CacheKey</code> annotation, in which case only those are used. Assuming that the method above needs now an extra attribute that should not be part of the key, this is how we would write it with JCache:</p>
<pre><code class="prettyprint java">@CacheResult(cacheName = &quot;book&quot;)
public Book findBook(@CacheKey ISBN isbn, boolean checkWarehouse) { ... }
</code></pre><p><code>@CacheResult</code> brings the concept of <em>exception</em> cache: whenever a method execution failed, it is possible to <em>cache</em> the exception that was raised to prevent calling the method again. Let’s assume that <code>InvalidIsbnNotFoundException</code> is thrown if the structure of the ISBN is invalid. This is a permanent failure, no book could ever be retrieved with such parameter. The following caches the exception so that further calls with the same, invalid ISBN, throws the cached exception directly instead of invoking the method again.</p>
<pre><code class="prettyprint java">@CacheResult(cacheName = &quot;books&quot;, exceptionCacheName = &quot;failures&quot;
             cachedExceptions = InvalidIsbnNotFoundException.class)
public Book findBook(@CacheKey ISBN isbn) { ... }
</code></pre><p>Of course, blindly throwing a cached exception might be very confusing as the call stack may not match with the current invocation context. We do our best to make sure the stacktrace matches by copying the exception with a consistent call stack.</p><p>JCache has this cool notion of <code>CacheResolver</code> that permits to resolve the cache to use at runtime. Because JCache supports regular caches and exception caches, the <code>CacheResolver</code> instances to use are determined by a <code>CacheResolverFactory</code>. The obvious default is to resolve the cache to use based on the <code>cacheName</code> and <code>exceptionCacheName</code> attributes, respectively. However, it is also possible to customize the factory to use per operation.</p>
<pre><code class="prettyprint java">@CacheResult(cacheName = &quot;books&quot;, cacheResolverFactory = MyFactory.class)
public Book findBook(@CacheKey ISBN isbn) { ... }
</code></pre><p>Finally, <code>@CacheResult</code> has a <code>skipGet</code> attribute that can be enabled to <em>always</em> invoke the method regardless of the status of the cache. This is actually quite similar to our own use of <code>@CachePut</code>.</p><h2><a href="#cacheput" class="anchor" name="cacheput"></a>@CachePut</h2><p>While the annotations have the same name, the semantic in JCache is fairly different. A simple update for our book would be written like this</p>
<pre><code class="prettyprint java">@CachePut(value = &quot;books&quot;, key = &quot;#p0&quot;)
public Book update(ISBN isbn, Book updatedBook) { ... }
</code></pre><p>While JCache would require you to write it like this</p>
<pre><code class="prettyprint java">@CachePut(cacheName = &quot;books&quot;)
public void update(ISBN isbn, @CacheValue Book updatedBook) { ... }
</code></pre><p>Note that even though <code>updatedBook</code> should not be part of the key, we didn&rsquo;t have to add a <code>@CacheKey</code> to the first argument. This is because the parameter annotated with <code>@CacheValue</code> is automatically excluded from the key generation.</p><p>As for <code>@CacheResult</code>, <code>@CachePut</code> allows to manage any exception that is thrown while executing the method, preventing the put operation to happen if the thrown exception matches the filter specified on the annotation.</p><p>Finally, it is possible to control if the cache is updated before or after the invocation of the annotated method. Of course, if it is updated before, no exception handling takes place.</p><h2><a href="#cacheremove-and-cacheremoveall" class="anchor" name="cacheremove-and-cacheremoveall"></a>@CacheRemove and @CacheRemoveAll</h2><p>These are really similar to <code>@CacheEvict</code> and <code>@CacheEvict(allEntries = true)</code> respectively. <code>@CacheRemove</code> has a special exception handling to prevent the eviction if the annotated method throws an exception that matches the filter specified on the annotation.</p><h1><a href="#other-features" class="anchor" name="other-features"></a>Other features</h1><h2><a href="#cachedefaults" class="anchor" name="cachedefaults"></a>CacheDefaults</h2><p><code>@CacheDefaults</code> is a class-level annotation that allows you to <em>share</em> common settings on any caching operation defined on the class. These are:</p>
<ul>
<li>The name of the cache</li>
<li>The custom <code>CacheResolverFactory</code></li>
<li>The custom <code>CacheKeyGenerator</code></li>
</ul><p>In the sample below, any cache-related operation would use the <code>books</code> cache:</p>
<pre><code class="prettyprint java">@CacheDefaults(cacheName = &quot;books&quot;)
public class BookRepositoryImpl implements BookRepository {

    @CacheResult
    public Book findBook(@CacheKey ISBN isbn) { ... }
}
</code></pre><h1><a href="#enabling-jsr-107-support" class="anchor" name="enabling-jsr-107-support"></a>Enabling JSR-107 support</h1><p>The implementation of the JCache support uses our own <code>Cache</code> and <code>CacheManager</code> abstraction which means that you can use your existing <code>CacheManager</code> infrastructure, and yet use standard annotations!</p><p>To enable the support of Spring caching annotations, you are used to either <code>@EnableCaching</code> or the <code>&lt;cache:annotation-driven/&gt;</code> xml element, for instance something like:</p>
<pre><code class="prettyprint java">@Configuration
@EnableCaching
public class AppConfig {
    @Bean
    public CacheManager cacheManager() { ...}

    ...
}
</code></pre><p>So, what does it take to bring the support of standard annotations into the mix? Well, not much. Just add the JCache API and the <code>spring-context-support</code> module in your classpath if you haven&rsquo;t already and you&rsquo;ll be set.</p><p>The existing infrastructure actually looks for the presence of the JCache API and when found alongside Spring&rsquo;s JCache support, it will also configure the necessary infrastructure to support the standard annotations.</p><h1><a href="#wrapping-up" class="anchor" name="wrapping-up"></a>Wrapping up</h1><p>Long story short, if you are already using Spring&rsquo;s caching abstraction and you&rsquo;d like to try the standard annotations, adding two more dependencies to your project is all that would be needed to get started. </p><p>Want to give it a try? Grab <a href="">a nightly SNAPSHOT build</a> of Spring 4.1 and add the <code>javax.cache:cache-api:1.0.0</code> and <code>org.springframework:spring-context-support:4.1.0.BUILD-SNAPSHOT</code> dependencies to your project. The <a href="https://docs.spring.io/spring/docs/4.1.0.BUILD-SNAPSHOT/spring-framework-reference/html/cache.html">documentation</a> has also been updated in case you need more details.</p><p>In a next post, I&rsquo;ll cover how supporting JSR-107 annotations affected our own support as well as some other cache-related improvements.</p></div>
</div>
<section id="disqus_thread"></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 1491;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a class="dsq-brlink" href="https://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a>
<div class="mobile-only">
<p><a href="/blog">
<i class="icon-chevron-left"></i>
Back
</a></p>
</div>
</article>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<div class="icon blog-icon all-posts"></div>
<a href="/blog">All Posts</a>
<a class="pull-right" href="/blog.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category active">
<div class="icon blog-icon engineering"></div>
<a href="/blog/category/engineering">Engineering</a>
<a class="pull-right" href="/blog/category/engineering.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon releases"></div>
<a href="/blog/category/releases">Releases</a>
<a class="pull-right" href="/blog/category/releases.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon news-and-events"></div>
<a href="/blog/category/news">News and Events</a>
<a class="pull-right" href="/blog/category/news.atom"><i class="icon-rss"></i></a>
</li>
</ul>
<ul class="social-btn--container">
<a class="social-btn twitter" href="https://twitter.com/springcentral"></a>

<a class="social-btn linkedin" href="https://www.linkedin.com/groups/46964"></a>
<a class="social-btn youtube" href="/videos"></a>
</ul>
<div id="blog-sidebar-newsletter">
<p>Get updates from The Spring Team delivered to your inbox</p>
<script src="https://app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_4723"></form>
<script>
        MktoForms2.loadForm("https://app-sj05.marketo.com", "625-IUJ-009", 4723, function(form){
          form.onSuccess(function(values, followUpUrl) {
            form.getFormElem().html("<p>Thank you!</p>");
            return false;
          });
        });
      </script>
</div>
</div>
</aside>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>