<!DOCTYPE html>
<html data-code-prettify="" data-mobile-support="" data-search="">
<head>
<title>Spring MVC Test with Geb</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<link href="/css/blog-92993c3ec6808bded45b277c18d7d621.css" rel="stylesheet" type="text/css" />

<meta content="summary" name="twitter:card" />
<meta content="@springcentral" name="twitter:site" />
<meta name="twitter:title" content="Spring MVC Test with Geb" />
<meta name="twitter:description" content="&lt;p&gt;In my &lt;a href=&quot;https://spring.io/blog/2014/03/26/spring-mvc-test-with-webdriver&quot;&gt;third post&lt;/a&gt; I discussed how to use &lt;a href=&quot;http://docs.seleniumhq.org/projects/webdriver/&quot;&gt;WebDriver&lt;/a&gt; to make designing our tests easier with the Page Object Pattern. In this post, I’m going to discuss how to use &lt;a href=&quot;http://www.gebish.org/&quot;&gt;Geb&lt;/a&gt; to make our testing with &lt;code&gt;MockMvc&lt;/code&gt; more Groovy.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#why-geb-and-mockmvc&quot; class=&quot;anchor&quot; name=&quot;why-geb-and-mockmvc&quot;&gt;&lt;/a&gt;Why Geb and MockMvc&lt;/h2&gt;
&lt;p&gt;Geb is backed by WebDriver, so it offers many of the same benefits we got from WebDriver. However, Geb makes things even easier by taking care of some of the boiler plate code for us. Of course we want to use MockMvc so that we do no need to deploy our code to a server. The easiest way to understand the benefits of using Geb is to jump into an example.&lt;/p&gt;
" />
<meta name="twitter:creator" content="@rob_winch" />
<meta name="twitter:image:src" content="https://gravatar.com/avatar/30ed046efb35c67d4c055dab109b8933?s=200" />

<meta property="og:title" content="Spring MVC Test with Geb" />
<meta property="og:image" content="https://gravatar.com/avatar/30ed046efb35c67d4c055dab109b8933?s=200" />
<meta property="og:description" content="&lt;p&gt;In my &lt;a href=&quot;https://spring.io/blog/2014/03/26/spring-mvc-test-with-webdriver&quot;&gt;third post&lt;/a&gt; I discussed how to use &lt;a href=&quot;http://docs.seleniumhq.org/projects/webdriver/&quot;&gt;WebDriver&lt;/a&gt; to make designing our tests easier with the Page Object Pattern. In this post, I’m going to discuss how to use &lt;a href=&quot;http://www.gebish.org/&quot;&gt;Geb&lt;/a&gt; to make our testing with &lt;code&gt;MockMvc&lt;/code&gt; more Groovy.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#why-geb-and-mockmvc&quot; class=&quot;anchor&quot; name=&quot;why-geb-and-mockmvc&quot;&gt;&lt;/a&gt;Why Geb and MockMvc&lt;/h2&gt;
&lt;p&gt;Geb is backed by WebDriver, so it offers many of the same benefits we got from WebDriver. However, Geb makes things even easier by taking care of some of the boiler plate code for us. Of course we want to use MockMvc so that we do no need to deploy our code to a server. The easiest way to understand the benefits of using Geb is to jump into an example.&lt;/p&gt;
" />
<meta content="article" property="og:type" />
<meta property="og:article:published_time" content="2014-04-15 22:23:00.0" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link active">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link active">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div></div>
<div class="container-fluid">
<div class="main-body--wrapper">
<div class="row-fluid blog--wrapper">
<article class="span8 mobile-left-pane" id="content">
<header class="desktop-only">
<div class="blog-category active content--title">
<div>Engineering</div>
</div>
<div class="blog-category content--title">
<div>Releases</div>
</div>
<div class="blog-category content--title">
<div>News and Events</div>
</div>
</header>
<div class="blog--container">
<header>
<h1 class="blog--title">Spring MVC Test with Geb</h1>
<div class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category">Engineering</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="https://gravatar.com/avatar/30ed046efb35c67d4c055dab109b8933?s=20&amp;d=mm" />
<a class="author" rel="author" href="/team/rwinch">Rob Winch</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2014-04-15 22:23:00.0">April 15, 2014</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="1504" href="/blog/2014/04/15/spring-mvc-test-with-geb#disqus_thread">
</a></div>
</div>
</header>
<div class="blog--post"><p>In my <a href="https://spring.io/blog/2014/03/26/spring-mvc-test-with-webdriver">third post</a> I discussed how to use <a href="http://docs.seleniumhq.org/projects/webdriver/">WebDriver</a> to make designing our tests easier with the Page Object Pattern. In this post, I&rsquo;m going to discuss how to use <a href="http://www.gebish.org/">Geb</a> to make our testing with <code>MockMvc</code> more Groovy.</p><h2><a href="#why-geb-and-mockmvc" class="anchor" name="why-geb-and-mockmvc"></a>Why Geb and MockMvc</h2><p>Geb is backed by WebDriver, so it offers many of the same benefits we got from WebDriver. However, Geb makes things even easier by taking care of some of the boiler plate code for us. Of course we want to use MockMvc so that we do no need to deploy our code to a server. The easiest way to understand the benefits of using Geb is to jump into an example.</p><p>&mdash;-<br /><strong>NOTE</strong>: Another great feature of Geb is its <a href="http://www.gebish.org/manual/current/">exceptional documentation</a>.</p>
<hr /><h2><a href="#updating-dependencies" class="anchor" name="updating-dependencies"></a>Updating Dependencies</h2><p>Before you use the project, you must ensure to update your dependencies. Instructions for both <a href="https://github.com/spring-projects/spring-test-mvc-htmlunit#building-with-maven">Maven</a> and <a href="https://github.com/spring-projects/spring-test-mvc-htmlunit#building-with-gradle">Gradle</a> can be found on the site documentation.</p><h2><a href="#using-geb" class="anchor" name="using-geb"></a>Using Geb</h2><p>Now that we have the correct dependencies, we can use Geb in our unit tests. The complete code sample for using Geb and Spring MVC Test can be found in <a href="https://github.com/spring-projects/spring-test-mvc-htmlunit/blob/master/mail-webapp/src/test/groovy/sample/geb/GebCreateMessagesSpec.groovy">GebCreateMessagesSpec</a>.</p><h3><a href="#creating-a-mockmvc-instance" class="anchor" name="creating-a-mockmvc-instance"></a>Creating a MockMvc instance</h3><p>In order to use HtmlUnit and Spring MVC Test we must first create a <code>MockMvc</code> instance. There is plenty of documentation on how to create a <code>MockMvc</code> instance, but we will review how to create a <code>MockMvc</code> instance very quickly in this section.</p><p>The first step is to create a new <code>GebReportingSpec</code> class that is annotated as shown below:</p>
<pre><code class="prettyprint groovy">@ContextConfiguration(classes=[WebMvcConfig,MockDataConfig])
@WebAppConfiguration
class GebCreateMessagesSpec extends GebReportingSpec {
  @Autowired
  WebApplicationContext context;

  WebDriver driver;

  ...
}
</code></pre>
<ul>
<li>For this to work ensure to add the spock-spring dependency as illustrated in the <a href="https://github.com/spring-projects/spring-test-mvc-htmlunit#updating-dependencies">updating-dependencies</a> section. This is why <code>@Autowired</code> annotations will be honored.</li>
<li><code>@ContextConfiguration</code> tells Spring what configuration to load. You will notice that we are loading a mock instance of our data tier to improve the performance of our tests. If we wanted, we could optionally run the tests against a real database. However, this has the disadvantages we <a href="https://spring.io/blog/2014/03/19/introducing-spring-test-mvc-htmlunit#integration-testing-to-the-rescue">mentioned previously</a>.</li>
<li><code>@WebAppConfiguration</code> indicates that a <code>WebApplicationContext</code> should be created rather than a <code>ApplicationContext</code>.</li>
</ul><p>Next we need to create our <code>MockMvc</code> instance from the <code>context</code>. An example of how to do this has been provided below:</p>
<pre><code class="prettyprint java">def setup() {
  MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build()
  ...
}
</code></pre><p>Of course this is just one way to create a <code>MockMvc</code> instance. We could have decided to <a href="https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.html#spring-mvc-test-server-filters">add a Servlet Filter</a>, use a <a href="https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.html#spring-mvc-test-server-setup-options">Standalone setup</a>, etc. The important thing is that we need an instance of <code>MockMvc</code>. For additional information on creating a <code>MockMvc</code> instance refer to the <a href="https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.html#spring-mvc-test-framework">Spring MVC Test documentation</a>.</p><h3><a href="#initializing-webdriver" class="anchor" name="initializing-webdriver"></a>Initializing WebDriver</h3><p>Now that we have created the <code>MockMvc</code> instance, we need to create a <code>MockMvcHtmlUnitDriver</code> which ensures we use the <code>MockMvc</code> instance we created in the previous step. We then use Geb&rsquo;s <a href="http://www.gebish.org/manual/current/driver.html#explicit_lifecycle">explicit lifecycle</a> and set the driver on Geb&rsquo;s <a href="http://www.gebish.org/manual/current/browser.html#the_browser">Browser</a> instance.</p>
<pre><code class="prettyprint java">WebDriver driver;

def setup() {
  MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build()
  driver = new MockMvcHtmlUnitDriver(mockMvc, true)
  browser.driver = driver
}

def destroy() {
  if(driver != null) {
    driver.close();
  }
}
</code></pre><h3><a href="#using-geb" class="anchor" name="using-geb"></a>Using Geb</h3><p>Now we can use Geb as we normally would, but without the need to deploy our application. For example, we can request the view to create a message with the following:</p>
<pre><code class="prettyprint groovy">to CreateMessagePage
</code></pre><p>We can then fill out the form and submit it to create a message.</p>
<pre><code class="prettyprint groovy">form.summary = expectedSummary
form.text = expectedMessage
submit.click(ViewMessagePage)
</code></pre><p>Any unrecognized method calls or property accesses/references that are not found will be forwarded to the current page object. This removes a lot of the boilerplate code we needed when using WebDriver directly.</p><p>Additionally, this improves on the design of our <a href="https://spring.io/blog/2014/03/21/spring-mvc-test-with-htmlunit">HtmlUnit test</a>. The most obvious change is that we are now using the Page Object Pattern. As we mentioned in <a href="#why-webdriver">Why WebDriver?</a>, we could use the Page Object Pattern with HtmlUnit, but it is much easier now.</p><p>Let&rsquo;s take a look at our <code>CreateMessagePage</code>.</p>
<pre><code class="prettyprint groovy">class CreateMessagePage extends Page {
  static url = &#39;messages/form&#39;
  static at = { assert title == &#39;Messages : Create&#39;; true }
  static content =  {
    submit { $(&#39;input[type=submit]&#39;) }
    form { $(&#39;form&#39;) }
    errors(required:false) { $(&#39;label.error, .alert-error&#39;)?.text() }
  }
}
</code></pre><p>The first thing you will notice is that our <code>CreateMessagePage</code> extends the <code>Page</code>. We won&rsquo;t go over the details of <code>Page</code>, but in summary it contains base functionality for all our pages.</p><p>The next thing you will notice is that we define a URL in which this page can be found. This allows us to navigate to the page with:</p>
<pre><code class="prettyprint groovy">to CreateMessagePage
</code></pre><p>We also have a closure that determines if we are at the specified page. It should return true if we are on the correct page. This is why we can assert that we are on the correct page with:</p><p>&mdash;<br /><strong>NOTE</strong>: We use an assertion in the closure, so we can determine where things went wrong if we were at the wrong page.</p>
<hr />
<pre><code class="prettyprint groovy">at CreateMessagePage
</code></pre><p>We last create a content closure that specifies all the areas of interest within the page. We can use a <a href="http://www.gebish.org/manual/current/intro.html#the_jquery_ish_navigator_api">jQuery-ish Navigator API</a> to select the content we are interested in.</p><p>Finally, we can verify that a new message was created successfully</p>
<pre><code class="prettyprint groovy">at ViewMessagePage
success == &#39;Successfully created a new message&#39;
id
date
summary == expectedSummary
message == expectedMessage
</code></pre><p>&mdash;<br /><strong>Feedback please!</strong></p><p>If you have feedback on this blog series or the Spring Test MVC HtmlUnit, I encourage you to reach out via the comments below, <a href="https://github.com/spring-projects/spring-test-mvc-htmlunit/issues">github issues</a>, or ping me on twitter <a href="https://twitter.com/rob_winch">@rob_winch</a>. Of course the best feedback comes in the form of <a href="https://github.com/spring-projects/spring-test-mvc-htmlunit#contributing">contributions</a>.</p></div>
</div>
<section id="disqus_thread"></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 1504;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a class="dsq-brlink" href="https://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a>
<div class="mobile-only">
<p><a href="/blog">
<i class="icon-chevron-left"></i>
Back
</a></p>
</div>
</article>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<div class="icon blog-icon all-posts"></div>
<a href="/blog">All Posts</a>
<a class="pull-right" href="/blog.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category active">
<div class="icon blog-icon engineering"></div>
<a href="/blog/category/engineering">Engineering</a>
<a class="pull-right" href="/blog/category/engineering.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon releases"></div>
<a href="/blog/category/releases">Releases</a>
<a class="pull-right" href="/blog/category/releases.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon news-and-events"></div>
<a href="/blog/category/news">News and Events</a>
<a class="pull-right" href="/blog/category/news.atom"><i class="icon-rss"></i></a>
</li>
</ul>
<ul class="social-btn--container">
<a class="social-btn twitter" href="https://twitter.com/springcentral"></a>

<a class="social-btn linkedin" href="https://www.linkedin.com/groups/46964"></a>
<a class="social-btn youtube" href="/videos"></a>
</ul>
<div id="blog-sidebar-newsletter">
<p>Get updates from The Spring Team delivered to your inbox</p>
<script src="https://app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_4723"></form>
<script>
        MktoForms2.loadForm("https://app-sj05.marketo.com", "625-IUJ-009", 4723, function(form){
          form.onSuccess(function(values, followUpUrl) {
            form.getFormElem().html("<p>Thank you!</p>");
            return false;
          });
        });
      </script>
</div>
</div>
</aside>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>