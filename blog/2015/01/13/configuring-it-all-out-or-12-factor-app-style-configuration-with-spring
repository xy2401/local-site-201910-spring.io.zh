<!DOCTYPE html>
<html data-code-prettify="" data-mobile-support="" data-search="">
<head>
<title>&quot;Configuring It All Out&quot; or &quot;12-Factor App-Style Configuration with Spring&quot;</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<link href="/css/blog-92993c3ec6808bded45b277c18d7d621.css" rel="stylesheet" type="text/css" />

<meta content="summary" name="twitter:card" />
<meta content="@springcentral" name="twitter:site" />
<meta name="twitter:title" content="&quot;Configuring It All Out&quot; or &quot;12-Factor App-Style Configuration with Spring&quot;" />
<meta name="twitter:description" content="&lt;p&gt;Let’s establish some vocabulary, before we begin. When we talk about &lt;em&gt;configuration&lt;/em&gt; in Spring, we’re &lt;em&gt;usually&lt;/em&gt; talking about the inputs into the Spring framework’s various &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html&quot;&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/a&gt; implementations that help the container understand what it is you want done. This might be an XML file to be fed into a &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html&quot;&gt;&lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;&lt;/a&gt;, or Java classes annotated a certain way to be fed into an &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html&quot;&gt;&lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another type of &lt;em&gt;configuration&lt;/em&gt;, as &lt;a href=&quot;http://12factor.net/config&quot;&gt;nicely described in the 12-Factor application manifesto&lt;/a&gt;, is any of an application’s that is likely to vary between deploys (staging, production, developer environments, etc.), like service credentials and hostnames.&lt;/p&gt;
" />
<meta name="twitter:creator" content="@starbuxman" />
<meta name="twitter:image:src" content="https://gravatar.com/avatar/fb22593caf24e4bb4c98d467cdd247e6?s=200" />

<meta property="og:title" content="&quot;Configuring It All Out&quot; or &quot;12-Factor App-Style Configuration with Spring&quot;" />
<meta property="og:image" content="https://gravatar.com/avatar/fb22593caf24e4bb4c98d467cdd247e6?s=200" />
<meta property="og:description" content="&lt;p&gt;Let’s establish some vocabulary, before we begin. When we talk about &lt;em&gt;configuration&lt;/em&gt; in Spring, we’re &lt;em&gt;usually&lt;/em&gt; talking about the inputs into the Spring framework’s various &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html&quot;&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/a&gt; implementations that help the container understand what it is you want done. This might be an XML file to be fed into a &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html&quot;&gt;&lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;&lt;/a&gt;, or Java classes annotated a certain way to be fed into an &lt;a href=&quot;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html&quot;&gt;&lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another type of &lt;em&gt;configuration&lt;/em&gt;, as &lt;a href=&quot;http://12factor.net/config&quot;&gt;nicely described in the 12-Factor application manifesto&lt;/a&gt;, is any of an application’s that is likely to vary between deploys (staging, production, developer environments, etc.), like service credentials and hostnames.&lt;/p&gt;
" />
<meta content="article" property="og:type" />
<meta property="og:article:published_time" content="2015-01-13 11:13:00.0" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link active">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link active">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div></div>
<div class="container-fluid">
<div class="main-body--wrapper">
<div class="row-fluid blog--wrapper">
<article class="span8 mobile-left-pane" id="content">
<header class="desktop-only">
<div class="blog-category active content--title">
<div>Engineering</div>
</div>
<div class="blog-category content--title">
<div>Releases</div>
</div>
<div class="blog-category content--title">
<div>News and Events</div>
</div>
</header>
<div class="blog--container">
<header>
<h1 class="blog--title">&quot;Configuring It All Out&quot; or &quot;12-Factor App-Style Configuration with Spring&quot;</h1>
<div class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category">Engineering</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="https://gravatar.com/avatar/fb22593caf24e4bb4c98d467cdd247e6?s=20&amp;d=mm" />
<a class="author" rel="author" href="/team/jlong">Josh Long</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2015-01-13 11:13:00.0">January 13, 2015</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="1929" href="/blog/2015/01/13/configuring-it-all-out-or-12-factor-app-style-configuration-with-spring#disqus_thread">
</a></div>
</div>
</header>
<div class="blog--post"><p>Let&rsquo;s establish some vocabulary, before we begin. When we talk about <em>configuration</em> in Spring, we&rsquo;re <em>usually</em> talking about the inputs into the Spring framework&rsquo;s various <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html"><code>ApplicationContext</code></a> implementations that help the container understand what it is you want done. This might be an XML file to be fed into a <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html"><code>ClassPathXmlApplicationContext</code></a>, or Java classes annotated a certain way to be fed into an <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html"><code>AnnotationConfigApplicationContext</code></a>.</p><p>Another type of <em>configuration</em>, as <a href="http://12factor.net/config">nicely described in the 12-Factor application manifesto</a>, is any of an application&rsquo;s that is likely to vary between deploys (staging, production, developer environments, etc.), like service credentials and hostnames.</p><p>This second type of configuration, which should live external to the deployed application, has been well supported in Spring since the <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html"><code>PropertyPlaceholderConfigurer</code></a> class was introduced. Spring&rsquo;s support for that type of configuration has come a long way since then and in this blog we&rsquo;re going to look at that progression.</p><h1><a href="#the-code-propertyplaceholderconfigurer-code" class="anchor" name="the-code-propertyplaceholderconfigurer-code"></a>The <code>PropertyPlaceholderConfigurer</code></h1><p>Spring&rsquo;s offered the <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html"><code>PropertyPlaceholderConfigurer</code></a> since 2003. Spring 2.5 introduced XML namespace support and with it XML namespace support for property placeholder resolution. For example <code>&lt;context:property-placeholder location = &quot;simple.properties&quot;/&gt;</code> would let us substitute bean definition literal values in the XML configuration for values assigned to keys in a (external) property file (in this case <code>simple.properties</code> which may be on the classpath or external to the application). This property file might look like:</p>
<pre><code class="prettyprint properties"># Database Credentials
configuration.projectName = Spring Framework
</code></pre><h1><a href="#the-code-environment-code-abstraction" class="anchor" name="the-code-environment-code-abstraction"></a>The <code>Environment</code> Abstraction</h1><p>This solution predates the introduction of Java configuration into Spring Framework proper in 3.0. Spring 3 made it easy to inject configuration values into Java component configuration using <code>@Value</code>-annotations, like this: </p>
<pre><code class="prettyprint java ">@Value(&quot;${configuration.projectName}&quot;) 
private String projectName; 
</code></pre><p>Spring 3.1 introduced the <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/Environment.html"><code>Environment</code></a> abstraction. It provides a bit of runtime indirection between the runnning application and the environment in which it is running. The <code>Environment</code> acts as a map of keys and values. You can configure where those values are read from by contributing a. Inject an object of type <code>Environment</code> anywhere you want and ask it questions. By default Spring loads up system environment keys and values, like <code>line.separator</code>. You can tell Spring to load up configuration keys from a file, specifically, using the <code>@PropertySource</code> annotation.</p>
<pre><code class="prettyprint java">package env;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.*;
import org.springframework.context.support.*;
import org.springframework.core.env.Environment;

@Configuration
@ComponentScan
@PropertySource(&quot;file:/path/to/simple.properties&quot;)
public class Application {

	@Bean
	static PropertySourcesPlaceholderConfigurer placeholderConfigurer() {
		return new PropertySourcesPlaceholderConfigurer();
	}

	@Value(&quot;${configuration.projectName}&quot;)
	void setProjectName(String projectName) {
		System.out.println(&quot;setting project name: &quot; + projectName);
	}

	@Autowired
	void setEnvironment(Environment env) {
		System.out.println(&quot;setting environment: &quot; + 
                      env.getProperty(&quot;configuration.projectName&quot;));
	}

	public static void main(String args[]) throws Throwable {
		new AnnotationConfigApplicationContext(Application.class);
	}
}
</code></pre><p>This example loads up the values from a file, <code>simple.properties</code>, and then has one value, <code>configuration.projectName</code>, injected using the <code>@Value</code> annotation and then read again from Spring&rsquo;s <code>Environment</code> abstraction. To be able to inject the values with the <code>@Value</code> annotation, we need to register a <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.html"><code>PropertySourcesPlaceholderConfigurer</code></a>. In this case, the output is <code>Spring Framework</code>.</p><p>The <code>Environment</code> also brings the idea of <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html"><em>profiles</em></a>. It lets you ascribe labels (profiles) to groupings of beans. Use profiles to describe beans and bean graphs that change from one environment to another. You can activate one or more profiles at a time. Beans that do not have a profile assigned to them are always activated. Beans that have the profile <code>default</code> are activated only when there are no other profiles are active.</p><p>Profiles let you describe sets of beans that need to be created differently in one environment versus another. You might, for example, use an embedded H2 <code>javax.sql.DataSource</code> in your local <code>dev</code> profile, but then switch to a <code>javax.sql.DataSource</code> for PostgreSQL that&rsquo;s resolved through a JNDI lookup or by reading the properties from an environment variable in <a href="http://cloudfoundry.org">Cloud Foundry</a> when the <code>prod</code> profile is active. In both cases, your code works: you get a <code>javax.sql.DataSource</code>, but the decision about <em>which</em> specialized instance is used is decided by the active profile or profiles.</p><p>You should use this feature sparingly. Ideally, the object graph between one environment and another should remain fairly fixed.</p><h1><a href="#em-bootiful-em-configuration" class="anchor" name="em-bootiful-em-configuration"></a><em>Bootiful</em> Configuration</h1><p><a href="https://spring.io/projects/spring-boot">Spring Boot</a> improves things considerably. Spring Boot will read the properties in <code>src/main/resources/application.properties</code> by default. <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html">If a profile is active</a>, it will also automatically reads in the configuration files based on the profile name, like <code>src/main/resources/application-foo.properties</code> where <code>foo</code> is the current profile. If the <a href="https://code.google.com/p/snakeyaml/">Snake YML library</a> is on the classpath, then it will also automatically load YML files. Yeah, read that part again. YML is so good, and so worth a go! Here&rsquo;s an example YML file:</p>
<pre><code class="prettyprint yaml">configuration:
	projectName : Spring Boot
	someOtherKey : Some Other Value
</code></pre><p>Spring Boot also made it much simpler to get the right result in common cases. It makes <code>-D</code> arguments to the <code>java</code> process and environment variables available as properties. It even normalizes them, so an environment variable <code>$CONFIGURATION_PROJECTNAME</code> or a <code>-D</code> argument of the form <code>-Dconfiguration.projectname</code> both become accessible with the key <code>configuration.projectName</code>.</p><p>Configuration values are strings, and if you have enough configuration values it can be unwieldy trying to make sure those keys don&rsquo;t themselves become magic strings in the code. Spring Boot introduces a <code>@ConfigurationProperties</code> component type. Annotate a POJO with <code>@ConfigurationProperties</code> and specify a prefix, and Spring will attempt to map all properties that start with that prefix to the POJO&rsquo;s properties. In the example below the value for <code>configuration.projectName</code> will be mapped to an instance of the POJO that all code can then inject and dereference to read the (type-safe) values. In this way, you only have the mapping from a key in one place.</p><p>In the example below, properties will be resolved automatically from <code>src/main/resources/application.yml</code>.</p>
<pre><code class="prettyprint java">package boot;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

// reads a value from src/main/resources/application.properties first
// but would also read:
//  java -Dconfiguration.projectName=..
//  export CONFIGURATION_PROJECTNAME=..

@SpringBootApplication
public class Application {

	@Autowired
	void setConfigurationProjectProperties(ConfigurationProjectProperties cp) {
		System.out.println(&quot;configurationProjectProperties.projectName = &quot; + cp.getProjectName());
	}

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}
}

@Component
@ConfigurationProperties(&quot;configuration&quot;)
class ConfigurationProjectProperties {

	private String projectName;

	public String getProjectName() {
		return projectName;
	}

	public void setProjectName(String projectName) {
		this.projectName = projectName;
	}
}
</code></pre><p>Spring Boot uses the <code>@ConfigurationProps</code> mechanism heavily to let users override bits of the system. You can see what property keys can be used to change things, for example, by adding the <code>org.springframework.boot:spring-boot-starter-actuator</code> dependency to a Spring Boot-based web application and then visiting <code>http://127.0.0.1:8080/configprops</code>. This will give you a list of supported configuration properties based on the types present on the classpath at runtime. As you add more Spring Boot types, you&rsquo;ll see more properties.</p><h1><a href="#centralized-journaled-configuration-with-the-spring-cloud-configuration-support" class="anchor" name="centralized-journaled-configuration-with-the-spring-cloud-configuration-support"></a>Centralized, Journaled Configuration with the Spring Cloud Configuration Support</h1><p>So far so good, but there are gaps in the approach so far:</p>
<ul>
<li>changes to an application&rsquo;s configuration require restarts</li>
<li>there is no traceability: how do we determine what changes were introduced into production and, if necessary, roll back?</li>
<li>configuration is de-centralized and it&rsquo;s not immediately apparent where to go to change what.</li>
<li>sometimes configuration values should be encrypted and decrypted for security. There is no out-of-the-box support for this.</li>
</ul><p><a href="https://projects.spring.io/spring-cloud/spring-cloud.html">Spring Cloud</a>, which builds upon Spring Boot and integrates various tools and libraries for working with microservices, including <a href="https://github.com/netflix">the Netflix OSS stack</a>, offers a <a href="https://cloud.spring.io/spring-cloud-config/">configuration server</a> and a client for that configuration server. This support, taken together, address these last three concerns.</p><p>Let&rsquo;s look at a simple example. First, we&rsquo;ll setup a configuration server. The configuration server is something to be shared among a set of applications or microservices based on Spring Cloud. You have to get it running, somewhere, once. Then, all other services need only know where to find the configuration service. The configuration service acts as a sort of proxy for configuration keys and values that it reads from a Git repository online or on a disk.</p>
<pre><code class="prettyprint java">package cloud.server;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.config.server.EnableConfigServer;

@SpringBootApplication
@EnableConfigServer
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}
</code></pre><p>If you manage things correctly, then the only configuration that lives with any of your services should be the configuration that tells the configuration service where to find the Git repository and the configuration that tells the other client services where to find the configuration service.</p><p>Here&rsquo;s the configuration for the configuration service, <code>src/main/resources/application.yml</code>:</p>
<pre><code class="prettyprint yaml">server:
	port: 8888

spring:
	cloud:
		config:
			server:
				git :
					uri: https://github.com/joshlong/microservices-lab-configuration

</code></pre><p>This tells the Spring Cloud configuration service to look for configuration files for individual client services in the Git repository on my GitHub account. The URI could, of course, just as easily have been a Git repository on my local file system. The value used for the URI could also have been a property reference, of the form, <code>${SOME_URI}</code>, that references - perhaps - an environment variable called <code>SOME_URI</code>.</p><p>Run the application and you&rsquo;ll be able to verify that your configuration service is working by pointing your browser at <code>http://localhost:8888/SERVICE/master</code> where <code>SERVICE</code> is the ID taken from your client service&rsquo;s <code>boostrap.yml</code>. Spring Cloud-based services look for a file called <code>src/main/resources/bootstrap.(properties,yml)</code> that it expects to find to - you guessed it! - bootstrap the service. One of the things it expects to find in the <code>bootstrap.yml</code> file is the ID of the service specified as a property, <code>spring.application.name</code>. Here&rsquo;s our configuration client&rsquo;s <code>bootstrap.yml</code>:</p>
<pre><code class="prettyprint yaml">spring:
	application:
		name: config-client
		cloud:
			config:
				uri: http://localhost:8888
</code></pre><p>When the Spring Cloud microservice runs, it&rsquo;ll see that its <code>spring.application.name</code> is <code>config-client</code>. It will contact the configuration service (which we&rsquo;ve told Spring Cloud is running at <code>http://localhosst:8080</code>, though this too could&rsquo;ve been an environment variable) and ask it for any configuration. The configuration service returns back JSON that contains all the configuration values in the <code>application.(properties,yml)</code> file as well as any service-specific configuration in <code>config-client.(yml,properties)</code>. It will <em>also</em> load any configuration for a given service <em>and</em> a specific profile, e.g., <code>config-client-dev.properties</code>.</p><p>This all just happens automatically. In the following example, the configuration value is read from the configuration service.</p>
<pre><code class="prettyprint java">package cloud.client;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.core.env.Environment;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

	@Autowired
	void setEnvironment(Environment e) {
		System.out.println(e.getProperty(&quot;configuration.projectName&quot;));
	}
}

@RestController
@RefreshScope
class ProjectNameRestController {

	@Value(&quot;${configuration.projectName}&quot;)
	private String projectName;

	@RequestMapping(&quot;/project-name&quot;)
	String projectName() {
		return this.projectName;
	}
}
</code></pre><p>The <code>ProjectNameRestController</code> is annotated with <a href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_refresh_scope"><code>@RefreshScope</code></a>, a custom Spring Cloud <em>scope</em> that lets any bean recreate itself (and re-read configuration values from the configuration service) in-place. There are various ways to trigger the refresh: send a <code>POST</code> request to <code>http://127.0.0.1:8080/refresh</code> (e.g.: <code>curl -d{} http://127.0.0.1:8080/refresh</code>), use the auto-exposed JMX refresh endpoint, or use the Spring Cloud Bus.</p><p>The <a href="https://cloud.spring.io/spring-cloud-bus/">Spring Cloud Bus</a> links all services through a RabbitMQ powered-bus. This is particularly powerful. You can tell one (or thousands!) of microservices to refresh themselves by sending a single message to a message bus. This prevents downtime and is <em>much</em> more friendly than having to systematically restart individual services or nodes.</p><p>To see all this in action, get the config client and config server running, being sure to point the config server to a Git repository that you can control and make changes to. Hit the REST endpoint and confirm that you see <code>Spring Cloud</code>. Then make changes to the configuration file in Git, and at the very least <code>git commit</code> them. Then trigger a refresh against the config client and revisit the REST endpoint again. You should see the updated value reflected!</p><p>The Spring Cloud configuration support <em>also</em> <a href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_security_2">includes first-class support for security and encryption</a>. I&rsquo;ll leave you to explore that last mile on your own, but it&rsquo;s fairly trivial and amounts to configuring a valid key.</p><h1><a href="#next-steps" class="anchor" name="next-steps"></a>Next Steps</h1><p>We&rsquo;ve covered a <em>lot</em> here! Armed with all of this, it should be easy to package one artifact and then move that artifact from one environment to another without changes to the artifact itself. If you&rsquo;re going to start an application today, I&rsquo;d recommend starting on Spring Boot and Spring Cloud, especially now that we&rsquo;ve looked at all the good stuff it brings you by default. Don&rsquo;t forget <a href="https://github.com/joshlong/configuring-it-all-out">to check out the code</a> behind all of these examples.</p></div>
</div>
<section id="disqus_thread"></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 1929;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a class="dsq-brlink" href="https://disqus.com">comments powered by <span class="logo-disqus">Disqus</span></a>
<div class="mobile-only">
<p><a href="/blog">
<i class="icon-chevron-left"></i>
Back
</a></p>
</div>
</article>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<div class="icon blog-icon all-posts"></div>
<a href="/blog">All Posts</a>
<a class="pull-right" href="/blog.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category active">
<div class="icon blog-icon engineering"></div>
<a href="/blog/category/engineering">Engineering</a>
<a class="pull-right" href="/blog/category/engineering.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon releases"></div>
<a href="/blog/category/releases">Releases</a>
<a class="pull-right" href="/blog/category/releases.atom"><i class="icon-rss"></i></a>
</li>
<li class="blog-category">
<div class="icon blog-icon news-and-events"></div>
<a href="/blog/category/news">News and Events</a>
<a class="pull-right" href="/blog/category/news.atom"><i class="icon-rss"></i></a>
</li>
</ul>
<ul class="social-btn--container">
<a class="social-btn twitter" href="https://twitter.com/springcentral"></a>

<a class="social-btn linkedin" href="https://www.linkedin.com/groups/46964"></a>
<a class="social-btn youtube" href="/videos"></a>
</ul>
<div id="blog-sidebar-newsletter">
<p>Get updates from The Spring Team delivered to your inbox</p>
<script src="https://app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_4723"></form>
<script>
        MktoForms2.loadForm("https://app-sj05.marketo.com", "625-IUJ-009", 4723, function(form){
          form.onSuccess(function(values, followUpUrl) {
            form.getFormElem().html("<p>Thank you!</p>");
            return false;
          });
        });
      </script>
</div>
</div>
</aside>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>