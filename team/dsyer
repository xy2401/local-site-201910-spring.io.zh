<!DOCTYPE html>
<html data-map="" xmlns="http://www.w3.org/1999/xhtml" data-mobile-support="" data-search="">
<head>
<title>Team · Dave Syer</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<script src="//maps.google.com/maps/api/js?key=AIzaSyBOVeQZLTLC5_RxhGtRXOV8xqQQQcP8b9Q" type="text/javascript"></script>
<script>
        /*<![CDATA[*/
        var teamLocations = [{'latitude':52.0,'longitude':0.0,'memberId':18,'name':'Dave Syer'}];
        /*]]>*/
    </script>

<meta property="og:title" content="Spring Team: Dave Syer" />
<meta property="og:image" content="https://gravatar.com/avatar/ae671230e3a1c2a0eefa7604990084f1?s=250&amp;s=250" />
<meta property="og:description" content="Dave Syer - Senior Consulting Engineer" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link active">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div data-member-id="18">
<div class="team-map--wrapper">
<div class="team-member--container">
<section class="container-fluid">
<div class="content--title">Spring Team</div>
<div class="row-fluid">
<div class="span4 mobile-right-pane">
<img class="team-member--avatar" alt="Dave Syer" src="https://gravatar.com/avatar/ae671230e3a1c2a0eefa7604990084f1?s=250&amp;s=250" />
</div>
<div class="span8 mobile-left-pane">
<div class="team-member-info--container">
<div class="team-member-social pull-right">
<a class="team-member--social--icon twitter-small" rel="me" href="https://twitter.com/david_syer"></a>
<a class="team-member--social--icon github-small" rel="me" href="https://github.com/dsyer"></a>
<a class="team-member--social--icon speakerdeck-small" rel="me" href="https://speakerdeck.com/dsyer"></a>
</div>
<h1 class="team-member--name">Dave Syer</h1>
<div class="team-member--sub-info">
<p>Senior Consulting Engineer</p>
<p>London</p>
</div>
<div class="team-member--bio">Founder of Spring Cloud, Spring Boot, Spring Batch, lead of Spring Security OAuth, and an active contributor to Spring Integration, Spring Framework, Spring AMQP, Spring Security. Experienced, delivery-focused architect and development manager. Has designed and built successful enterprise software solutions using Spring, and implemented them in major institutions worldwide.</div>
</div>
</div>
</div>
</section>
</div>
<figure id="map"></figure>
</div>
</div>
<div class="container" data-member-id="18">
<div class="main-body--wrapper">
<div class="team-members--wrapper with-padding">
<div class="row-fluid">
<div class="span8 mobile-left-pane" id="content">
 <div class="content-container--wrapper blog--container">
<div class="content-container--title">Blog Posts by Dave Syer</div>
<div class="content-items--container posts">
<article class="member-post--container">
<header>
<a href="/blog/2019/01/21/manual-bean-definitions-in-spring-boot"><h2 class="member-post--title">Manual Bean Definitions in Spring Boot</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2019-01-21 14:32:00.0">January 21, 2019</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p>Suppose you want to use Spring Boot, but you don’t want to <code>@EnableAutoConfiguration</code>. What should you do exactly? In an <a href="https://spring.io/blog/2018/12/12/how-fast-is-spring">earlier article</a> I showed that Spring is intrinsically fast and lightweight, but one of the short pieces of advice improve startup time was to consider manually importing the Spring Boot autoconfigurations, instead of sucking them all in automatically. It won’t be the right thing to do for all applications, but it might help, and it certainly won’t hurt to understand what the options are. In this piece we explore various ways of doing manual configuration and assess their impact.</p>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2019/01/21/manual-bean-definitions-in-spring-boot">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2018/12/12/how-fast-is-spring"><h2 class="member-post--title">How Fast is Spring?</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2018-12-12 14:09:00.0">December 12, 2018</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p>Performance has always been one of the top priorities of the Spring Engineering team, and we are continually monitoring and responding to changes and to feedback. Some fairly intense and precise work has been done recently (in the last 2-3 years) and this article is here to help you to find the results of that work and to learn how to measure and improve performance in your own applications. The headline is that Spring Boot 2.1 and Spring 5.1 have some quite nice optimizations for startup time and heap usage. Here’s a graph made by measuring startup time for heap constrained apps:</p>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2018/12/12/how-fast-is-spring">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2018/11/08/spring-boot-in-a-container"><h2 class="member-post--title">Spring Boot in a Container</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2018-11-08 12:01:00.0">November 8, 2018</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p>Many people are using containers to wrap their Spring Boot applications, and building containers is not a simple thing to do. This is an article for developers of Spring Boot applications, and containers are not always a good abstraction for developers - they force you to learn about and think about very low level concerns - but you will on occasion be called on to create or use a container, so it pays to understand the building blocks. Here we aim to show you some of the choices you can make if you are faced with the prospect of needing to create your own container.</p>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2018/11/08/spring-boot-in-a-container">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2018/10/22/functional-bean-registrations-in-spring-cloud-function"><h2 class="member-post--title">Functional Bean Registrations in Spring Cloud Function</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2018-10-22 13:01:00.0">October 22, 2018</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p><a href="https://github.com/spring-cloud/spring-cloud-function">Spring Cloud Function</a> has a couple of new features in 2.0 (still in milestone phase), and possibly the most dramatic is the ability to go "fully functional". This is made possible by changes in Spring Boot 2.1 together with Spring Framework 5.1, and it means a different way of thinking about bean definitions in Spring applications, but also significant improvements in startup performance.</p>
</div>
<div class="sect1">
<h2 id="aws-cost-savings"><a class="anchor" href="#aws-cost-savings"></a>AWS Cost Savings</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It’s always good to start with a picture, especially if it tells a story. Here’s a graph that shows the improvement in Spring Cloud Function 2.0 over 1.0, comparing the cost of cold starts in AWS:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQRWYdp_BpzQg7nA9P7xi9bjTapxu6cYrLi7PFvBmnnKM2zCuVuYzAh25KpFuz0hX0fqJyo1nJO5fyN/pubchart?oid=459598255&amp;format=image" alt="Memory Cost">
</div>
</div>
<div class="paragraph">
<p>The x-axis is memory in MB, and the y-axis is cost of a cold start in GBsec. The most dramatic effect is for low memory containers, where the cost is almost 4 times lower with 2.0. The "Custom" function is even faster (10x over Spring Cloud Function 1.0) - it’s a <a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html">custom AWS runtime</a> using Spring Cloud Function with functional beans. The origin of the improvement is in dramatically shorter startup times, which in turn come from using the functional form of bean definitions in the application. Josh made a <a href="https://www.youtube.com/watch?v=Q_P28p7XsbQ">video</a> about functional bean registration a while ago if you need an introduction (it’s on YouTube). Now let’s have a closer look at how it works in Spring Cloud Function.</p>
</div>
</div>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2018/10/22/functional-bean-registrations-in-spring-cloud-function">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2018/09/25/spring-cloud-function-2-0-and-azure-functions"><h2 class="member-post--title">Spring Cloud Function 2.0 and Azure Functions</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2018-09-25 15:33:00.0">September 25, 2018</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p><a href="https://github.com/spring-cloud/spring-cloud-function">Spring Cloud Function</a> has had support for Microsoft <a href="https://azure.microsoft.com/en-gb/services/functions">Azure Functions</a> since version 1.0, but in the latest 2.0 releases (still in milestone phase) we decided to change the programming model a bit. This article describes what the changes mean for users, and provides a bit of background behind the shift. We in the Spring team had a lot of fun working on this and collaborating with the folks at Microsoft to get the best blend of the two technologies for our users.</p>
</div>
<h1 id="azure-functions-for-java" class="sect0"><a class="anchor" href="#azure-functions-for-java"></a>Azure Functions for Java</h1>
<div class="paragraph">
<p>Microsoft has had Java support in Azure Functions for a while, and it enables developers to easily write and deploy Java code that connects in a serverless way to a wide range of platform services (events, databases, storage, HTTP gateways, etc.) in Azure. It comes with an annotation-based programming model that puts the function implementations in Java methods. So you write a method and annotation it with <code>@FunctionName</code>, and it becomes an Azure Function. There is a rich set of tools based on a Maven plugin (currently) that drives the Azure command line and can be used to build a function, run and debug it locally and deploy it to the cloud. There is a <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-java-maven">Quickstart Guide</a> on the Azure website which will help you get all the pre-requisites installed and working, and there is more detailed documentation about how Azure Functions works in the <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-java">Developer’s Guide</a>.</p>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2018/09/25/spring-cloud-function-2-0-and-azure-functions">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2016/11/21/the-joy-of-mustache-server-side-templates-for-the-jvm"><h2 class="member-post--title">The Joy of Mustache: Server Side Templates for the JVM</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2016-11-21 10:46:00.0">November 21, 2016</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p>I don’t do much server-side templating, but when I do…​ well frankly, I tend to forget things. Every template language has its strengths and weaknesses, and they all have syntax to remember, and more frequently to forget. Recently I completed some work on the old <a href="https://github.com/spring-projects/spring-petclinic">Spring Petclinic</a>, converting it to use <a href="http://www.thymeleaf.org/">Thymeleaf</a> in the view layer, and re-organizing the code to be a bit more "modern". I enjoyed working with Thymeleaf 3, and found it a pleasant experience, but had to spend a lot of time scanning documentation and samples. Then I had another little project that needed some templates, and I remembered my fondness for <a href="https://mustache.github.com">Mustache</a>, which we added to Spring Boot back in version 1.2, and which plays an important role in the excellent <a href="https://github.com/spring-projects/spring-restdocs">Spring REST Docs</a> tool. I added <code>spring-boot-starter-mustache</code> to my new project, and was up and running within seconds.</p>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2016/11/21/the-joy-of-mustache-server-side-templates-for-the-jvm">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2016/07/20/notes-on-reactive-programming-part-iii-a-simple-http-server-application"><h2 class="member-post--title">Notes on Reactive Programming Part III: A Simple HTTP Server Application</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2016-07-20 13:51:00.0">July 20, 2016</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p>In this article we continue the series on <a href="https://spring.io/blog/2016/06/13/notes-on-reactive-programming-part-ii-writing-some-code">Reactive Programming</a>, and the focus is less on learning the basic APIs and more on more concrete use cases and writing code that actually does something useful. We will see how Reactive is a useful abstraction for concurrent programming, but also that it has some very low level features that we should learn to treat with respect and caution. If we start to use these features to their full potential we can take control of layers in our application that previously were invisible, hidden by containers, platforms and frameworks.</p>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2016/07/20/notes-on-reactive-programming-part-iii-a-simple-http-server-application">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2016/06/13/notes-on-reactive-programming-part-ii-writing-some-code"><h2 class="member-post--title">Notes on Reactive Programming Part II: Writing Some Code</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2016-06-13 14:57:00.0">June 13, 2016</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p>In this article we continue the series on <a href="https://spring.io/blog/2016/06/07/notes-on-reactive-programming-part-i-the-reactive-landscape">Reactive Programming</a>, and we concentrate on explaining some concepts through actual code samples. The end result should be that you understand a bit better what makes Reactive different, and what makes it functional. The examples here are quite abstract, but they give you a way to think about the APIs and the programming style, and start to get a feel for how it is different. We will see the elements of Reactive, and learn how to control the flow of data, and process in background threads if necessary.</p>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2016/06/13/notes-on-reactive-programming-part-ii-writing-some-code">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2016/06/07/notes-on-reactive-programming-part-i-the-reactive-landscape"><h2 class="member-post--title">Notes on Reactive Programming Part I: The Reactive Landscape</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2016-06-07 12:15:00.0">June 7, 2016</time>
</div>
</div>
</header>
<section class="member-post--summary"><div class="paragraph">
<p>Reactive Programming is interesting (again) and there is a lot of noise about it at the moment, not all of which is very easy to understand for an outsider and simple enterprise Java developer, such as the author. This article (the first in a series) might help to clarify your understanding of what the fuss is about. The approach is as concrete as possible, and there is no mention of "denotational semantics". If you are looking for a more academic approach and loads of code samples in Haskell, the internet is full of them, but you probably don’t want to be here.</p>
</div>
</section>
<a class="blog-preview--readmore" href="/blog/2016/06/07/notes-on-reactive-programming-part-i-the-reactive-landscape">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2016/04/19/spring-cloud-brixton-rc2-now-available"><h2 class="member-post--title">Spring Cloud Brixton.RC2 now available</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2016-04-19 11:01:00.0">April 19, 2016</time>
</div>
</div>
</header>
<section class="member-post--summary"><p>The latest milestone version of Spring Cloud is “Brixton.RC2” and it is available now from the usual repositories (details in the <a href="https://projects.spring.io/spring-cloud/">home page</a>). This is a bugfix release building on the RC1, and there are no notable new features. If all goes well we’d like to get to a RELEASE in a week or two.</p>
</section>
<a class="blog-preview--readmore" href="/blog/2016/04/19/spring-cloud-brixton-rc2-now-available">
Read more...
</a>
</article>
</div>
</div>
</div>
<aside class="span4 mobile-left-pane">
<div class="member-twitter--wrapper">
<div class="member-twitter--header">
<div class="twitter-handle">@david_syer</div>
<a class="twitter-follow-btn" href="https://twitter.com/intent/user?screen_name=david_syer">
<i class="icon-twitter"></i>
Follow
</a>
</div>
<div class="member-twitter--body">
<div>
<a class="twitter-timeline" data-border-color="#ffffff" data-chrome="nofooter transparent noheader noscrollbar" data-show-replies="false" data-widget-id="366969513482285056" width="250" data-screen-name="david_syer" href="https://twitter.com/david_syer"></a>
</div>
<script>
                  !function(d,s,id){
                    var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';
                    if(!d.getElementById(id)){
                      js=d.createElement(s);
                      js.id=id;
                      js.src=p+"://platform.twitter.com/widgets.js";
                      fjs.parentNode.insertBefore(js,fjs);
                    }}(document,"script","twitter-wjs");
                </script>
</div>
</div>
</aside>
</div>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>