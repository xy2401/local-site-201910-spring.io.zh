<!DOCTYPE html>
<html data-map="" xmlns="http://www.w3.org/1999/xhtml" data-mobile-support="" data-search="">
<head>
<title>Team · Ben Wilcock</title>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1, user-scalable=no" id="Viewport" name="viewport" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon-ca31b78daf0dd9a106bbf3c6d87d4ec7.png" />
<link href="https://fonts.googleapis.com/css?family=Varela+Round|Montserrat:400,700" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="/css/main-bc256dba5f9d253d6425441ccfb82576.css" />
<script src="/jspm_packages/system-eccc019329febb5a1b06bde008ca5614.js"></script>
<script>
    System.config({baseURL: "/b92013b"});
  </script>
<script src="/config-5a675c9cddea3a5f55b71416e67d47d6.js"></script>
<script>
      System.import('app/main.js')
  </script>
<meta content="7qGntFPD9lWAVCtUu5U77v4l68PsTHf6xpzgjQv2j2M" name="google-site-verification" />

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<script src="//maps.google.com/maps/api/js?key=AIzaSyBOVeQZLTLC5_RxhGtRXOV8xqQQQcP8b9Q" type="text/javascript"></script>
<script>
        /*<![CDATA[*/
        var teamLocations = [];
        /*]]>*/
    </script>

<meta property="og:title" content="Spring Team: Ben Wilcock" />
<meta property="og:image" content="https://gravatar.com/avatar/15aba3f666761f09945e8efc6384006b?s=250&amp;s=250" />
<meta property="og:description" content="Ben Wilcock - Product Marketing Manager for Spring" />
</head>
<body>

<noscript><iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-KZM7GF6" style="display:none;visibility:hidden" width="0"></iframe></noscript>

<script type="text/javascript">
    // Work around Google font rendering issues in webkit browsers on Windows 7
    if (navigator.userAgent.indexOf("NT 6.1") != -1) {
      document.body.style.WebkitTextStroke = "0.5px";
    }
  </script>
<div class="viewport">
<header class="navbar header--navbar desktop-only">
<div class="navbar-inner">
<div class="container-fluid">
<div class="spring-logo--container">
<a class="spring-logo" href="/"><span></span></a>
</div>
<ul class="nav pull-right">
<li class="navbar-link">
<a href="/projects">Projects</a>
</li>
<li class="navbar-link">
<a href="/guides">Guides</a>
</li>
<li class="navbar-link">
<a href="/blog">Blog</a>
</li>
<li class="navbar-link">
<a href="/services">Training & Certification</a>
</li>
<li class="navbar-link nav-search js-nav-search">
<a>
<i class="icon-search navbar-search--icon js-search-input-open"></i>
<span class="search-input-close js-search-input-close">
<i class="icon-remove"></i>
</span>
</a>
</li>
</ul>
</div>
</div>
<div class="search-dropdown--container js-search-dropdown">
<div class="container-fluid">
<div class="search-form--container">
<form action="/search" class="form-inline form-search" method="get">
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search for documentation, guides, and posts..." type="text" value="" />
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
</form>
</div>
</div>
</div>
</header>
<div>
<div class="mobile-navigation--wrapper mobile-only">
<div class="navigation-drawer--container">
<div class="mobile-search--container">
<form action="/search" class="form-inline form-search" method="get">
<button class="search-form--submit" type="submit"><i class="icon-search"></i></button>
<input class="search-query search-form--form js-search-input" name="q" placeholder="Search..." type="text" value="" />
</form>
</div>
<div class="navigation-item-list">
<div class="navbar-link active">
<a href="/">
Home
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/projects">
Projects
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/guides">
Guides
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/blog">
Blog
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
<div class="navbar-link">
<a href="/services">
Training & Certification
<i class="icon-chevron-right pull-right"></i>
</a>
</div>
</div>
</div>
<div class="mobile-nav">
<div class="nav-icon js-open-nav-drawer">
<i class="icon-reorder"></i>
</div>
<div class="header-center-icon">
<a href="/">
<div class="icon icon-spring-logo-mobile"></div>
</a>
</div>
</div>
</div>
</div>
<div class="header--container"></div>
<div class="container-fluid"></div>
<div data-member-id="189">
<div class="team-map--wrapper">
<div class="team-member--container">
<section class="container-fluid">
<div class="content--title">Spring Team</div>
<div class="row-fluid">
<div class="span4 mobile-right-pane">
<img class="team-member--avatar" alt="Ben Wilcock" src="https://gravatar.com/avatar/15aba3f666761f09945e8efc6384006b?s=250&amp;s=250" />
</div>
<div class="span8 mobile-left-pane">
<div class="team-member-info--container">
<div class="team-member-social pull-right">
<a class="team-member--social--icon twitter-small" rel="me" href="https://twitter.com/benbravo73"></a>
<a class="team-member--social--icon github-small" rel="me" href="https://github.com/benwilcock"></a>
</div>
<h1 class="team-member--name">Ben Wilcock</h1>
<div class="team-member--sub-info">
<p>Product Marketing Manager for Spring</p>
<p>Bristol, United Kingdom</p>
</div>
<div class="team-member--bio">Ben is hugely passionate about Spring and the many ways in which it changes peoples lives for the better. Having had a long career in software, spanning roles in development, analysis, design, and consultancy, he’s experienced first-hand the many challenges that face producers of software at all levels.
As Pivotal’s Principal Product Marketing Manager for Spring, Ben hopes to promote the advantages of Spring to the widest possible audience so that they too can benefit from its incredible flexibility, diversity, interoperability, and productivity.</div>
</div>
</div>
</div>
</section>
</div>
<figure id="map"></figure>
</div>
</div>
<div class="container" data-member-id="189">
<div class="main-body--wrapper">
<div class="team-members--wrapper with-padding">
<div class="row-fluid">
<div class="span8 mobile-left-pane" id="content">
<div class="content-container--wrapper blog--container">
<div class="content-container--title">Blog Posts by Ben Wilcock</div>
<div class="content-items--container posts">
<article class="member-post--container">
<header>
<a href="/blog/2019/10/15/simple-event-driven-microservices-with-spring-cloud-stream"><h2 class="member-post--title">Simple Event Driven Microservices with Spring Cloud Stream</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2019-10-15 15:40:00.0">October 15, 2019</time>
</div>
</div>
</header>
<section class="member-post--summary"><p>Event driven architecture is great. But without a framework, writing the scaffolding required to work with popular event messaging platforms can be messy. In this post we’ll take a look at how <a href="https://spring.io/projects/spring-cloud-stream">Spring Cloud Stream</a> can be used to simplify your code.</p>
<h2><a href="#the-problem" class="anchor" name="the-problem"></a>The Problem</h2>
<p>You just want to write logic for your event driven application, but the boilerplate messaging code can get in the way. Connecting your apps to messaging services is tricky, and if you’re an enterprise developer, you probably need to work with multiple messaging technologies (either on-premises or in the cloud).</p>
</section>
<a class="blog-preview--readmore" href="/blog/2019/10/15/simple-event-driven-microservices-with-spring-cloud-stream">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2019/08/16/securing-services-with-spring-cloud-gateway"><h2 class="member-post--title">Securing Services with Spring Cloud Gateway</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2019-08-16 16:00:00.0">August 16, 2019</time>
</div>
</div>
</header>
<section class="member-post--summary"><p>So far in this series, we’ve covered <a href="https://benwilcock.github.io/spring-cloud-gateway-demo/getting_started.html">Getting Started</a> and <a href="https://benwilcock.github.io/spring-cloud-gateway-demo/runtime-discovery-and-service-hiding.html">Hiding Services</a> with <a href="https://spring.io/projects/spring-cloud-gateway">Spring Cloud Gateway</a>. However, when we set about hiding our services, we didn’t secure them. In this article, we’ll correct this.</p>
<p>To secure our services, we’ll use the Token Relay pattern supported by OAuth 2.0 and the Javascript Object Signing &amp; Encryption (JOSE) and JSON Web Tokens standards. This will give our users a means to identify themselves, authorize applications to view their profile and access the secured resources behind the gateway.</p>
</section>
<a class="blog-preview--readmore" href="/blog/2019/08/16/securing-services-with-spring-cloud-gateway">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2019/07/01/hiding-services-runtime-discovery-with-spring-cloud-gateway"><h2 class="member-post--title">Hiding Services &amp; Runtime Discovery with Spring Cloud Gateway</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2019-07-01 16:57:00.0">July 1, 2019</time>
</div>
</div>
</header>
<section class="member-post--summary"><p><a href="https://twitter.com/benbravo73">Ben Wilcock</a> – Spring Marketing, Pivotal.<br><a href="https://twitter.com/BrianMMcClain">Brian McClain</a> – Technical Marketing, Pivotal.</p>
<p>It’s rare for a company to want <em>every</em> API to be publicly accessible. Most prefer to keep their services secret by default, only exposing APIs publicly when absolutely necessary. </p>
<p><a href="https://spring.io/guides/gs/gateway/">Spring Cloud Gateway</a> can help. Spring Cloud Gateway allows you to route traffic to your APIs using simple Java™ instructions (which we saw <a href="https://content.pivotal.io/practitioners/getting-started-with-spring-cloud-gateway-3">in the last article</a>) or with YAML configuration files (which we’ll demonstrate in this one). To hide your services, you set up your network so that the only server accessible from the outside is the gateway. The gateway then becomes a gate-keeper, controlling ingress and egress from outside. It’s a very popular pattern.</p>
</section>
<a class="blog-preview--readmore" href="/blog/2019/07/01/hiding-services-runtime-discovery-with-spring-cloud-gateway">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2019/06/18/getting-started-with-spring-cloud-gateway"><h2 class="member-post--title">Getting Started with Spring Cloud Gateway</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2019-06-18 04:30:00.0">June 18, 2019</time>
</div>
</div>
</header>
<section class="member-post--summary"><p>Microservice architectures are great, but as your application programming interfaces (APIs) start to grow, so do the challenges related to their maintenance. </p>
<p>For example, as an existing API matures and adds new features it will need to take its clients along with it on the journey. When the details of an API change, clients need to adjust in order to work with these changes. This process takes time and can really slow your APIs evolution and interfere with your ability to iterate quickly. </p>
<p>Offering multiple APIs brings with it its own set of challenges. How do you route requests and responses to the correct API? How do you manage any message disparity? How do you support clients when your endpoints can move around? </p>
</section>
<a class="blog-preview--readmore" href="/blog/2019/06/18/getting-started-with-spring-cloud-gateway">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2019/05/21/pivotal-cloud-foundry-is-5-years-old-here-s-how-it-changed-my-life"><h2 class="member-post--title">Pivotal Cloud Foundry is 5 years old, here’s how it changed my life...</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2019-05-21 10:34:00.0">May 21, 2019</time>
</div>
</div>
</header>
<section class="member-post--summary"><p><a href="https://twitter.com/starbuxman">Josh Long</a> often says that “production is the best place on the Internet.” But where I used to work, developers needed to negotiate with operations, networks, and security before their code could go anywhere near this promised land. </p>
<p>Understandably, each of these disciplines seemed to have the same hidden agenda: change is bad. Experience had taught us that change was difficult and error-prone, so as a company we’d become risk-averse and cautious about our deployments. Releases were infrequent and large. There was plenty that could go wrong.</p>
</section>
<a class="blog-preview--readmore" href="/blog/2019/05/21/pivotal-cloud-foundry-is-5-years-old-here-s-how-it-changed-my-life">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2019/04/02/event-driven-java-with-spring-cloud-stream-and-azure-event-hubs-guest-post"><h2 class="member-post--title">Event-driven Java with Spring Cloud Stream and Azure Event Hubs [Guest Post]</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2019-04-02 00:00:00.0">April 2, 2019</time>
 </div>
</div>
</header>
<section class="member-post--summary"><blockquote>
<p>Asir Selvasingh | Principal PM Architect | Microsoft – Java on Azure</p>
</blockquote>
<p>Spring Cloud Stream Binder for Azure Event Hubs is now generally available. </p>
<p>It is simple to build highly scalable event-driven Java apps using Spring Cloud Stream with Event Hubs, a fully managed, real-time data ingestion service on Azure that is resilient and reliable service for any situation; this includes emergencies, thanks to its geo-disaster recovery and geo-replication features.</p>
<p>Spring Cloud Stream provides a binder abstraction for popular message broker implementations. It provides a flexible programming model built on already established and familiar Spring idioms and best practices, including support for persistent pub/sub semantics, consumer groups, and stateful partitions. Now, developers can use the same patterns for building Java apps with Event Hubs. </p>
</section>
<a class="blog-preview--readmore" href="/blog/2019/04/02/event-driven-java-with-spring-cloud-stream-and-azure-event-hubs-guest-post">
Read more...
</a>
</article>
<article class="member-post--container">
<header>
<a href="/blog/2019/03/07/has-there-ever-been-a-better-time-to-become-a-java-developer"><h2 class="member-post--title">Has there ever been a better time to become a Java developer?</h2></a>
<div class="meta-data--container">
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2019-03-07 13:00:00.0">March 7, 2019</time>
</div>
</div>
</header>
<section class="member-post--summary"><p><strong>Surely there’s never been a better time to become a Java developer?</strong> </p>
<p>There are productivity tools available these days that would have been mind-blowing just five years ago. </p>
<p>Take <strong><a href="https://spring.io/projects/spring-boot">Spring Boot</a></strong> for example. Many people reading this on the Spring website may be familiar with Spring Boot. But let’s take a moment to acknowledge its awesomeness. </p>
<p>Years ago, if you were going to use the Spring Framework in your application, you had to be OK with a certain amount of configuration toil creeping into your day. But it wasn’t nice friendly configuration like, (ah, actually, sorry, I can’t think of an example of ‘friendly configuration’), it was nasty XML configuration with a side order of XSD, eww! </p>
</section>
<a class="blog-preview--readmore" href="/blog/2019/03/07/has-there-ever-been-a-better-time-to-become-a-java-developer">
Read more...
</a>
</article>
</div>
</div>
</div>
<aside class="span4 mobile-left-pane">
<div class="member-twitter--wrapper">
<div class="member-twitter--header">
<div class="twitter-handle">@benbravo73</div>
<a class="twitter-follow-btn" href="https://twitter.com/intent/user?screen_name=benbravo73">
<i class="icon-twitter"></i>
Follow
</a>
</div>
<div class="member-twitter--body">
<div>
<a class="twitter-timeline" data-border-color="#ffffff" data-chrome="nofooter transparent noheader noscrollbar" data-show-replies="false" data-widget-id="366969513482285056" width="250" data-screen-name="benbravo73" href="https://twitter.com/benbravo73"></a>
</div>
<script>
                  !function(d,s,id){
                    var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';
                    if(!d.getElementById(id)){
                      js=d.createElement(s);
                      js.id=id;
                      js.src=p+"://platform.twitter.com/widgets.js";
                      fjs.parentNode.insertBefore(js,fjs);
                    }}(document,"script","twitter-wjs");
                </script>
</div>
</div>
</aside>
</div>
</div>
</div>
</div>
<footer class="footer">
<div class="container-fluid">
<div class="row-fluid">
<div class="span12">
<div class="navbar">
<div class="container">
<ul class="nav">
<li><a href="/team">Team</a></li>
<li><a href="/tools">Tools</a></li>
<li><a href="https://store.pivotal.io/">Store</a></li>
<li><a href="/blog">Newsletter</a></li>
</ul>
</div>
</div>
&copy; <span>2019</span> <a href="https://www.pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved.
<a href="https://pivotal.io/terms-of-use">Terms of Use</a> &bullet;
<a href="https://pivotal.io/privacy-policy">Privacy</a> &bullet;
<a href="/trademarks">Trademark Guidelines</a>
<div id="teconsent" style="display:inline-block;"></div>
</div>
</div>
</div>
</footer>
<div id="scrim"></div>
</div>
</body></html>